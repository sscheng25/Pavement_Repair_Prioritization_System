geom_smooth(method = "lm", se=F, colour = "#3FB0C0") +
facet_wrap(~Variable, ncol = 3, scales = "free") +
labs(title = "Numeric Variables vs. PCI",
subtitle = "El Paso, TX") +
stat_cor(aes(label = ..r.label..), label.x = 0) +
plotTheme()
centerline_grid <-
EPCenterline_new5 %>%
st_join(all_net %>%
st_transform('ESRI:102339')) %>%
dplyr::select(PCI_2018, uniqueID, countJams, countCrash, countPothole, geometry) %>%
na.omit()
centerline_grid %>%
st_drop_geometry() %>%
dplyr::select(PCI_2018, countJams, countCrash, countPothole) %>%
gather(Variable, Value, -PCI_2018) %>%
ggplot(aes(Value, PCI_2018)) +
geom_point(size = 0.5, color = "grey") +
geom_smooth(method = "lm", se=F, colour = "#3FB0C0") +
facet_wrap(~Variable, ncol = 3, scales = "free") +
labs(title = "Numeric Variables vs. PCI",
subtitle = "El Paso, TX") +
stat_cor(aes(label = ..r.label..), label.x = 0) +
plotTheme()
tl_roads_PCI <- st_join(tl_roads, EPCenterline_new4, join=st_nearest_feature)
tl_roads_PCI <- tl_roads_PCI[c('index','RTTYP','PCI_2018')]
tl_roads_PCI %>%
ggplot(aes(RTTYP, PCI_2018)) +
geom_bar(position = "dodge", stat = "summary", fun = "mean", fill="#3FB0C0") +
labs(title = "Route Type vs. PCI",
y="PCI Score in 2018",
x="Route Type",
subtitle = "Dataset: Tiger Line Roads (US Census)") + plotTheme()
class_PCI<- EPCenterline_new4[c('index','CLASS','PCI_2018')]
class_PCI %>%
ggplot(aes(CLASS, PCI_2018)) +
geom_bar(position = "dodge", stat = "summary", fun = "mean", fill="#3FB0C0") +
labs(title = "Road Class vs. PCI",
y="PCI Score in 2018",
x="Road Class",
subtitle = "Dataset: EPCenterline")  + plotTheme()
roadbed_base_PCI %>%
ggplot(aes(BASE_TYPE_, PCI_2018)) +
geom_bar(position = "dodge", stat = "summary", fun = "mean", fill="#3FB0C0") +
labs(title = "Roadbed Base Material vs. PCI",
y="PCI Score in 2018",
x="Roadbed Base Material",
subtitle = "Dataset: TXDOT Roadbed_Base") +
scale_x_discrete(labels = wrap_format(10)) +
plotTheme()
roadbed_surface_PCI %>%
ggplot(aes(SRFC_TYPE, PCI_2018)) +
geom_bar(position = "dodge", stat = "summary", fun = "mean", fill="#3FB0C0") +
labs(title = "Roadbed Surface Material vs. PCI",
y="PCI Score in 2018",
x="Roadbed Surface Material",
subtitle = "Dataset: TXDOT Roadbed_Surface") +
scale_x_discrete(labels = wrap_format(19)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))+
plotTheme()
paved_PCI<- EPCenterline_new4[c('index','STATUS','PCI_2018')]
paved_PCI %>%
ggplot(aes(STATUS, PCI_2018)) +
geom_bar(position = "dodge", stat = "summary", fun = "mean", fill="#3FB0C0") +
labs(title = "Paved Status vs. PCI",
y="PCI Score in 2018",
x="Paved Status",
subtitle = "Dataset: EPCenterline") + plotTheme()
land_use_with_PCI<- EPCenterline_new4[c('index','land_use_type','PCI_2018')]%>%
na.omit()
land_use_with_PCI$land_use_type = stringr::str_replace_all(land_use_with_PCI$land_use_type, "_", " ")
land_use_with_PCI %>%
ggplot(aes(land_use_type, PCI_2018)) +
geom_bar(position = "dodge", stat = "summary", fun = "mean", fill="#3FB0C0") +
labs(title = "Land Use vs. PCI",
y="PCI Score in 2018",
x="Land Use Type",
subtitle = "Dataset: El Paso Land Use") +
scale_x_discrete(labels = wrap_format(12)) +
plotTheme()
glimpse(EPCenterline_new5)
save.image("C:/Users/CSS/Desktop/EDA.RData")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, results = FALSE, message = FALSE)
source("https://raw.githubusercontent.com/urbanSpatial/Public-Policy-Analytics-Landing/master/functions.r")
glimpse(EP_test_KNN)
amenity <- read.csv("C:\\Users\\CSS\\Desktop\\MUSA801\\OSM_amenities\\OSM_amenity.csv")
amenity_sf <-
amenity %>%
st_as_sf(coords = c("lon", "lat"), crs = 4326, agr = "constant") %>%
st_transform('ESRI:102339')
ggplot() +
geom_sf(data = El_Paso_city, color = "grey") +
geom_sf(data = amenity_sf, aes(color = amenity), size=0.5, show.legend = "point") +
labs(title = "Open Street Map Amenities",
subtitle = "El Paso, TX")+
mapTheme()
ggplot(amenity_sf, aes(y=amenity)) +
geom_bar(width=0.5, color="black", fill = "#08519c") +
labs(title = "Amenities by Type",
x="Count",
y="Type",
subtitle = "El Paso, TX") + plotTheme()
food_drink <- c('restaurant', 'fast_food', 'cafe', 'bar', 'ice_cream', 'pub')
entertainment <- c('arts_centre', 'cinema', 'theatre')
car_facility <- c('fuel', 'car_rental', 'car_wash', 'parking', 'parking_space')
am_food_drink <- amenity_sf %>%
filter(amenity %in% food_drink)
am_entertainment <- amenity_sf %>%
filter(amenity %in% entertainment)
am_car_facility <- amenity_sf %>%
filter(amenity %in% car_facility)
# KNN function
st_c <- st_coordinates
EP_test_KNN <-
EPCenterline_new5 %>%
mutate(
food_drink_nn3 = nn_function(na.omit(st_c(st_centroid(EPCenterline_new5))),na.omit(st_c(am_food_drink)), 3),
entertainment_nn3 = nn_function(na.omit(st_c(st_centroid(EPCenterline_new5))),na.omit(st_c(am_entertainment)), 3),
car_facility_nn3 = nn_function(na.omit(st_c(st_centroid(EPCenterline_new5))),na.omit(st_c(am_car_facility)), 3),
)
# fishnet again
food_net <-
dplyr::select(am_food_drink) %>%
mutate(countFood = 1) %>%
aggregate(., fishnet_sf, sum) %>%
mutate(countFood = replace_na(countFood, 0),
uniqueID = rownames(.),
cvID = sample(round(nrow(fishnet_sf) / 8),
size=nrow(fishnet_sf), replace = TRUE)) %>%
filter(countFood>0)
food_net <-
food_net %>%
dplyr::select(geometry, uniqueID, countFood)
EP_test_KNN %>%
st_drop_geometry() %>%
dplyr::select(PCI_2018, food_drink_nn3, entertainment_nn3, car_facility_nn3) %>%
gather(Variable, Value, -PCI_2018) %>%
ggplot(aes(Value, PCI_2018)) +
geom_point(size = 0.5, color = "grey") +
geom_smooth(method = "lm", se=F, colour = "#3FB0C0") +
facet_wrap(~Variable, ncol = 3, scales = "free") +
labs(title = "Nearest Neighbor Variables vs. PCI",
subtitle = "El Paso, TX") +
stat_cor(aes(label = ..r.label..), label.x = 0) +
plotTheme()
glimpse(EP_test_KNN)
OLS_reg1 <-
lm(PCI_2018 ~  crash_len + waze_count + potholes_len +
car_facility_nn3 + entertainment_nn3 + food_drink_nn3 +
road_age + VMT_pop + total_pop + dist_hydro + dist_major_int +
med_hh_income + pct_transport_to_work + pctWhite +
CLASS + land_use_type,
data = EP_test_KNN)
stargazer(OLS_reg1, type = "text",title = "OLS Regression Results", align=TRUE, no.space=TRUE)
summary(OLS_reg1)
EP_model_1 <-
EP_test_KNN %>%
mutate(PCI.Predict = predict(OLS_reg1, EP_test_KNN),
PCI.Error = PCI.Predict - PCI_2018,
PCI.AbsError = abs(PCI.Predict - PCI_2018),
PCI.APE = (abs(PCI.Predict - PCI_2018)) / PCI.Predict)
MAE <- mean(EP_model_1$PCI.AbsError, na.rm = T)
MAPE <- mean(EP_model_1$PCI.APE, na.rm = T)
acc <- data.frame(MAE, MAPE)
kable(acc) %>%
kable_styling(full_width = F)
glimpse(EP_test_KNN)
OLS_reg1 <-
lm(PCI_2018 ~  crash_len + waze_count + potholes_len +
car_facility_nn3 + entertainment_nn3 + food_drink_nn3 +
road_age + VMT_pop + total_pop + dist_hydro + dist_major_int +
# med_hh_income + pct_transport_to_work + pctWhite +
CLASS + land_use_type,
data = EP_test_KNN)
stargazer(OLS_reg1, type = "text",title = "OLS Regression Results", align=TRUE, no.space=TRUE)
summary(OLS_reg1)
EP_model_1 <-
EP_test_KNN %>%
mutate(PCI.Predict = predict(OLS_reg1, EP_test_KNN),
PCI.Error = PCI.Predict - PCI_2018,
PCI.AbsError = abs(PCI.Predict - PCI_2018),
PCI.APE = (abs(PCI.Predict - PCI_2018)) / PCI.Predict)
MAE <- mean(EP_model_1$PCI.AbsError, na.rm = T)
MAPE <- mean(EP_model_1$PCI.APE, na.rm = T)
acc <- data.frame(MAE, MAPE)
kable(acc) %>%
kable_styling(full_width = F)
glimpse(EP_test_KNN)
OLS_reg1 <-
lm(PCI_2018 ~  crash_len + waze_count + potholes_len +
car_facility_nn3 + entertainment_nn3 + food_drink_nn3 +
road_age + VMT_pop + dist_hydro + dist_major_int +
# med_hh_income + pct_transport_to_work + pctWhite +
CLASS + land_use_type,
data = EP_test_KNN)
stargazer(OLS_reg1, type = "text",title = "OLS Regression Results", align=TRUE, no.space=TRUE)
summary(OLS_reg1)
EP_model_1 <-
EP_test_KNN %>%
mutate(PCI.Predict = predict(OLS_reg1, EP_test_KNN),
PCI.Error = PCI.Predict - PCI_2018,
PCI.AbsError = abs(PCI.Predict - PCI_2018),
PCI.APE = (abs(PCI.Predict - PCI_2018)) / PCI.Predict)
MAE <- mean(EP_model_1$PCI.AbsError, na.rm = T)
MAPE <- mean(EP_model_1$PCI.APE, na.rm = T)
acc <- data.frame(MAE, MAPE)
kable(acc) %>%
kable_styling(full_width = F)
# glimpse(EP_test_KNN)
OLS_reg1 <-
lm(PCI_2018 ~  crash_len + potholes_len + #waze_count +
car_facility_nn3 + entertainment_nn3 + #food_drink_nn3 +
road_age + VMT_pop + dist_hydro + dist_major_int +
# med_hh_income + pct_transport_to_work + pctWhite +
CLASS + land_use_type,
data = EP_test_KNN)
stargazer(OLS_reg1, type = "text",title = "OLS Regression Results", align=TRUE, no.space=TRUE)
summary(OLS_reg1)
EP_model_1 <-
EP_test_KNN %>%
mutate(PCI.Predict = predict(OLS_reg1, EP_test_KNN),
PCI.Error = PCI.Predict - PCI_2018,
PCI.AbsError = abs(PCI.Predict - PCI_2018),
PCI.APE = (abs(PCI.Predict - PCI_2018)) / PCI.Predict)
MAE <- mean(EP_model_1$PCI.AbsError, na.rm = T)
MAPE <- mean(EP_model_1$PCI.APE, na.rm = T)
acc <- data.frame(MAE, MAPE)
kable(acc) %>%
kable_styling(full_width = F)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, results = FALSE, message = FALSE)
library(tidyverse)
library(sf)
library(lubridate)
library(tigris)
library(tidycensus)
library(gganimate)
library(viridis)
library(riem)
library(gridExtra)
library(knitr)
library(kableExtra)
library(RSocrata)
library(caret)
library(purrr)
library(FNN)
library(stargazer)
library(dplyr)
library(spatstat)
library(raster)
library(spdep)
library(grid)
library(mapview)
library(stringr)
library(ggcorrplot)
library(scales)
library(colorspace)
library(rgdal)
library(RColorBrewer)
library(rasterVis)
library(sp)
library(ggpubr)
library(leaflet)
library(gganimate)
library(gifski)
library(transformr)
library(jtools)
palette_5 <- c("#0c1f3f", "#08519c", "#3bf0c0", "#e6a52f", "#e76420")
palette_5blues <-c("#eff3ff","#bdd7e7","#6baed6","#3182bd","#08519c")
palette_4 <-c("#08519c","#3bf0c0","#e6a52f","#e76420")
palette_2 <-c("#e6a52f","#08519c")
palette_3 <-c("#e6a52f","#08519c", "#e76420")
source("https://raw.githubusercontent.com/urbanSpatial/Public-Policy-Analytics-Landing/master/functions.r")
mapTheme <- function(base_size = 12) {
theme(
text = element_text( color = "black"),
plot.title = element_text(size = 16,colour = "black"),
plot.subtitle=element_text(face="italic"),
plot.caption=element_text(hjust=0),
axis.ticks = element_blank(),
panel.background = element_blank(),axis.title = element_blank(),
axis.text = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(colour = "black", fill=NA, size=2),
strip.text.x = element_text(size = 14))
}
plotTheme <- function(base_size = 12) {
theme(
text = element_text( color = "black"),
plot.title = element_text(size = 16,colour = "black"),
plot.subtitle = element_text(face="italic"),
plot.caption = element_text(hjust=0),
axis.ticks = element_blank(),
panel.background = element_blank(),
panel.grid.major = element_line("grey80", size = 0.1),
panel.grid.minor = element_blank(),
panel.border = element_rect(colour = "black", fill=NA, size=2),
strip.background = element_rect(fill = "grey80", color = "white"),
strip.text = element_text(size=12),
axis.title = element_text(size=12),
axis.text = element_text(size=10),
plot.background = element_blank(),
legend.background = element_blank(),
legend.title = element_text(colour = "black", face = "italic"),
legend.text = element_text(colour = "black", face = "italic"),
strip.text.x = element_text(size = 14)
)
}
# Please download this from google drive and put it under Data folder, I've added it to git ignore
load("Data/EDA.RData")
amenity <- read.csv("Data/OSM_amenities/OSM_amenity.csv")
amenity_sf <-
amenity %>%
st_as_sf(coords = c("lon", "lat"), crs = 4326, agr = "constant") %>%
st_transform('ESRI:102339')
ggplot() +
geom_sf(data = El_Paso_city, color = "grey") +
geom_sf(data = amenity_sf, aes(color = amenity), size=0.5, show.legend = "point") +
labs(title = "Open Street Map Amenities",
subtitle = "El Paso, TX")+
mapTheme()
ggplot(amenity_sf, aes(y=amenity)) +
geom_bar(width=0.5, color="black", fill = "#08519c") +
labs(title = "Amenities by Type",
x="Count",
y="Type",
subtitle = "El Paso, TX") + plotTheme()
food_drink <- c('restaurant', 'fast_food', 'cafe', 'bar', 'ice_cream', 'pub')
entertainment <- c('arts_centre', 'cinema', 'theatre')
car_facility <- c('fuel', 'car_rental', 'car_wash', 'parking', 'parking_space')
am_food_drink <- amenity_sf %>%
filter(amenity %in% food_drink)
am_entertainment <- amenity_sf %>%
filter(amenity %in% entertainment)
am_car_facility <- amenity_sf %>%
filter(amenity %in% car_facility)
# KNN function
st_c <- st_coordinates
EPCenterline_new6 <-
EPCenterline_new5 %>%
mutate(
food_drink_nn3 = nn_function(na.omit(st_c(st_centroid(EPCenterline_new5))),na.omit(st_c(am_food_drink)), 3),
entertainment_nn3 = nn_function(na.omit(st_c(st_centroid(EPCenterline_new5))),na.omit(st_c(am_entertainment)), 3),
car_facility_nn3 = nn_function(na.omit(st_c(st_centroid(EPCenterline_new5))),na.omit(st_c(am_car_facility)), 3),
)
EPCenterline_new6 %>%
st_drop_geometry() %>%
dplyr::select(PCI_2018, food_drink_nn3, entertainment_nn3, car_facility_nn3) %>%
gather(Variable, Value, -PCI_2018) %>%
ggplot(aes(Value, PCI_2018)) +
geom_point(size = 0.5, color = "grey") +
geom_smooth(method = "lm", se=F, colour = "#3FB0C0") +
facet_wrap(~Variable, ncol = 3, scales = "free") +
labs(title = "Nearest Neighbor Variables vs. PCI",
subtitle = "El Paso, TX") +
stat_cor(aes(label = ..r.label..), label.x = 0) +
plotTheme()
# glimpse(EPCenterline_new6)
OLS_reg1 <-
lm(PCI_2018 ~  crash_len + potholes_len + #waze_count +
car_facility_nn3 + entertainment_nn3 + #food_drink_nn3 +
road_age + VMT_pop + dist_hydro + dist_major_int +
# med_hh_income + pct_transport_to_work + pctWhite +
CLASS + land_use_type,
data = EPCenterline_new6)
stargazer(OLS_reg1, type = "text",title = "OLS Regression Results", align=TRUE, no.space=TRUE)
summary(OLS_reg1)
EP_model_1 <-
EPCenterline_new6 %>%
mutate(PCI.Predict = predict(OLS_reg1, EPCenterline_new6),
PCI.Error = PCI.Predict - PCI_2018,
PCI.AbsError = abs(PCI.Predict - PCI_2018),
PCI.APE = (abs(PCI.Predict - PCI_2018)) / PCI.Predict)
MAE <- mean(EP_model_1$PCI.AbsError, na.rm = T)
MAPE <- mean(EP_model_1$PCI.APE, na.rm = T)
acc <- data.frame(MAE, MAPE)
kable(acc) %>%
kable_styling(full_width = F)
poisson_reg1 <- glm(formula =
PCI_2018 ~  crash_len + waze_count + potholes_len +
car_facility_nn3 + entertainment_nn3 + food_drink_nn3 +
road_age + VMT_pop + total_pop + n_hydro_int +
med_hh_income + pct_transport_to_work + pctWhite +
CLASS + land_use_type,
data = EPCenterline_new6,
family = poisson)
fitControl <- trainControl(method = "cv", number = 100)
set.seed(825)
OLS_reg1.cv <-
train(PCI_2018 ~  crash_len + waze_count + potholes_len +
car_facility_nn3 + entertainment_nn3 + food_drink_nn3 +
road_age + VMT_pop + total_pop + n_hydro_int +
med_hh_income + pct_transport_to_work + pctWhite +
CLASS + land_use_type,
data = EPCenterline_new6,
method = "lm", trControl = fitControl, na.action = na.pass)
poisson_reg1 <- glm(formula =
PCI_2018 ~  crash_len + potholes_len + #waze_count +
car_facility_nn3 + entertainment_nn3 + #food_drink_nn3 +
road_age + VMT_pop + dist_hydro + dist_major_int +
# med_hh_income + pct_transport_to_work + pctWhite +
CLASS + land_use_type,
data = EPCenterline_new6,
family = poisson)
stargazer(poisson_reg1, type = "text",title = "Poisson Regression Results", align=TRUE, no.space=TRUE)
EP_model_2 <-
EPCenterline_new6 %>%
mutate(PCI.Predict = predict(poisson_reg1, EPCenterline_new6),
PCI.Error = PCI.Predict - PCI_2018,
PCI.AbsError = abs(PCI.Predict - PCI_2018),
PCI.APE = (abs(PCI.Predict - PCI_2018)) / PCI.Predict)
MAE <- mean(EP_model_2$PCI.AbsError, na.rm = T)
MAPE <- mean(EP_model_2$PCI.APE, na.rm = T)
acc <- data.frame(MAE, MAPE)
kable(acc) %>%
kable_styling(full_width = F)
fitControl <- trainControl(method = "cv", number = 100)
set.seed(825)
OLS_reg1.cv <-
train(PCI_2018 ~  crash_len + potholes_len + #waze_count +
car_facility_nn3 + entertainment_nn3 + #food_drink_nn3 +
road_age + VMT_pop + dist_hydro + dist_major_int +
# med_hh_income + pct_transport_to_work + pctWhite +
CLASS + land_use_type,
data = EPCenterline_new6,
method = "lm", trControl = fitControl, na.action = na.pass)
OLS_reg1.cv
OLS_reg1.cv$resample[1:10,]
7.6*0.07+15.2*0.31+26.6*0.43
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, results = FALSE, message = FALSE)
library(tidyverse)
library(sf)
library(lubridate)
library(tigris)
library(tidycensus)
library(gganimate)
library(viridis)
library(riem)
library(gridExtra)
library(knitr)
library(kableExtra)
library(RSocrata)
library(caret)
library(purrr)
library(FNN)
library(stargazer)
library(dplyr)
library(spatstat)
library(raster)
library(spdep)
library(grid)
library(mapview)
library(stringr)
library(ggcorrplot)
library(scales)
library(colorspace)
library(rgdal)
library(RColorBrewer)
library(rasterVis)
library(sp)
library(ggpubr)
library(leaflet)
library(gganimate)
library(gifski)
library(transformr)
library(jtools)
library(stringr)
palette_5 <- c("#0c1f3f", "#08519c", "#3bf0c0", "#e6a52f", "#e76420")
palette_5blues <-c("#eff3ff","#bdd7e7","#6baed6","#3182bd","#08519c")
palette_4 <-c("#08519c","#3bf0c0","#e6a52f","#e76420")
palette_2 <-c("#e6a52f","#08519c")
palette_3 <-c("#e6a52f","#08519c", "#e76420")
source("https://raw.githubusercontent.com/urbanSpatial/Public-Policy-Analytics-Landing/master/functions.r")
mapTheme <- function(base_size = 12) {
theme(
text = element_text( color = "black"),
plot.title = element_text(size = 16,colour = "black"),
plot.subtitle=element_text(face="italic"),
plot.caption=element_text(hjust=0),
axis.ticks = element_blank(),
panel.background = element_blank(),axis.title = element_blank(),
axis.text = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(colour = "black", fill=NA, size=2),
strip.text.x = element_text(size = 14))
}
plotTheme <- function(base_size = 12) {
theme(
text = element_text( color = "black"),
plot.title = element_text(size = 16,colour = "black"),
plot.subtitle = element_text(face="italic"),
plot.caption = element_text(hjust=0),
axis.ticks = element_blank(),
panel.background = element_blank(),
panel.grid.major = element_line("grey80", size = 0.1),
panel.grid.minor = element_blank(),
panel.border = element_rect(colour = "black", fill=NA, size=2),
strip.background = element_rect(fill = "grey80", color = "white"),
strip.text = element_text(size=12),
axis.title = element_text(size=12),
axis.text = element_text(size=10),
plot.background = element_blank(),
legend.background = element_blank(),
legend.title = element_text(colour = "black", face = "italic"),
legend.text = element_text(colour = "black", face = "italic"),
strip.text.x = element_text(size = 14)
)
}
load("Data/EDA.RData")
