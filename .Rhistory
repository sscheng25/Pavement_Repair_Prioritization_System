# this works! but takes a while to run - feel free to change to make it faster if you know a better way :)
VMT_with_PCI <-
EPCenterline_new %>%
st_join(VMT_sf)%>%
group_by(index, GEOID)%>%
summarize(PCI_2018= mean(PCI_2018))%>%
st_drop_geometry()
#join to epcenterline df
EPCenterline_new2 <- EPCenterline_new %>%
left_join(VMT_with_PCI, by = 'index')
# this works! but takes a while to run - feel free to change to make it faster if you know a better way :)
VMT_with_PCI <-
EPCenterline_new %>%
st_join(VMT_sf)%>%
group_by(index, GEOID)%>%
summarize(PCI_2018= mean(PCI_2018))%>%
st_drop_geometry()
# this works! but takes a while to run - feel free to change to make it faster if you know a better way :)
VMT_with_PCI <-
EPCenterline_new %>%
st_join(VMT_sf)
VMT_with_PCI <- VMT_with_PCI %>%
group_by(index, GEOID)%>%
summarize(PCI_2018= mean(PCI_2018))%>%
st_drop_geometry()
# this works! but takes a while to run - feel free to change to make it faster if you know a better way :)
VMT_with_PCI <-
EPCenterline_new %>%
st_join(VMT_sf)
VMT_with_PCI <- VMT_with_PCI %>%
group_by(index, GEOID)%>%
summarize(PCI_2018= min(PCI_2018))%>%
st_drop_geometry()
VMT_with_PCI <- VMT_with_PCI %>%
st_drop_geometry()%>%
group_by(index, GEOID)%>%
dplyr::select(min(PCI_2018))
VMT_with_PCI <- VMT_with_PCI %>%
st_drop_geometry()%>%
group_by(index, GEOID)%>%
dplyr::select(min('PCI_2018'))
View(VMT_with_PCI)
count(VMT_with_PCI$index) >1
count(VMT_with_PCI, vars=index)
count(VMT_with_PCI[index]>1)
count(VMT_with_PCI['index']>1)
View(VMT_with_PCI)
VMT_centerlines <-
EPCenterline_new %>%
st_join(VMT_sf)
VMT_with_PCI_GEOID <- VMT_centerlines %>%
st_drop_geometry()%>%
group_by(index, GEOID)%>%
dplyr::select(PCI_2018)
VMT_with_PCI_GEOID <- VMT_centerlines %>%
st_drop_geometry()%>%
group_by(index, GEOID)%>%
dplyr::select(index, GEOID, PCI_2018)
View(VMT_with_PCI_GEOID)
VMT_with_PCI_index <- VMT_with_PCI_GEOID %>%
group_by(index) %>%
summarize(PCI_2018 = min(PCI_2018))
View(VMT_with_PCI_index)
rm(VMT_with_PCI)
rm(VMT_centerlines)
rm(VMT_with_PCI_GEOID)
rm(VMT_with_PCI_index)
# this works! but takes a while to run - feel free to change to make it faster if you know a better way :)
VMT_centerlines <-
EPCenterline_new %>%
st_join(VMT_sf)
VMT_with_PCI_GEOID <- VMT_centerlines %>%
st_drop_geometry()%>%
group_by(index, GEOID)%>%
dplyr::select(index, GEOID, PCI_2018)
VMT_with_PCI_index <- VMT_with_PCI_GEOID %>%
group_by(index) %>%
summarize(PCI_2018 = min(PCI_2018))
VMT_with_PCI <- left_join(VMT_with_PCI_index, VMT_with_PCI_GEOID, by = 'index')
View(VMT_with_PCI)
VMT_with_PCI_index <- VMT_with_PCI_GEOID %>%
group_by(index) %>%
summarize(PCI_2018 = mean(PCI_2018))
VMT_with_PCI <- left_join(VMT_with_PCI_index, VMT_with_PCI_GEOID, by = 'index')
View(VMT_with_PCI_GEOID)
rm(VMT_centerlines)
rm(VMT_with_PCI)
rm(VMT_with_PCI_GEOID)
rm(VMT_with_PCI_index)
# this works! but takes a while to run - feel free to change to make it faster if you know a better way :)
VMT_centerlines <-
EPCenterline_new %>%
st_join(VMT_sf)
VMT_with_PCI_GEOID <- VMT_centerlines %>%
st_drop_geometry()%>%
group_by(index, GEOID)%>%
dplyr::select(index, GEOID, PCI_2018)
VMT_with_PCI_GEOID$uniqueID <- 1:nrow(VMT_with_PCI_GEOID)
View(VMT_with_PCI_GEOID)
VMT_with_PCI_index <- VMT_with_PCI_GEOID %>%
group_by(index) %>%
summarize(PCI_2018 = mean(PCI_2018),
uniqueID = min(uniqueID))%>%
dplyr::select(index, uniqueID, PCI_2018)
View(VMT_with_PCI_index)
VMT_with_PCI <- left_join(VMT_with_PCI_index, VMT_with_PCI_GEOID, by = 'uniqueID')
View(VMT_with_PCI)
VMT_with_PCI <- left_join(VMT_with_PCI_index, VMT_with_PCI_GEOID, by = 'uniqueID')%>%
dplyr::select(index,GEOID,PCI_2018)
VMT_with_PCI <- left_join(VMT_with_PCI_index, VMT_with_PCI_GEOID, by = 'uniqueID')%>%
dplyr::select(index.y,GEOID.y,PCI_2018.y)
VMT_with_PCI <- left_join(VMT_with_PCI_index, VMT_with_PCI_GEOID, by = 'uniqueID')%>%
dplyr::select(index.y,GEOID,PCI_2018.y)
VMT_with_PCI <- left_join(VMT_with_PCI_index, VMT_with_PCI_GEOID, by = 'uniqueID')%>%
dplyr::select(index.y,GEOID,PCI_2018.y)%>%
rename(index=index.y,
PCI_2018.y=PCI_2018)
VMT_with_PCI <- left_join(VMT_with_PCI_index, VMT_with_PCI_GEOID, by = 'uniqueID')%>%
dplyr::select(index.y,GEOID,PCI_2018.y)%>%
rename(index=index.y,
PCI_2018=PCI_2018.y)
View(VMT_with_PCI)
#join to epcenterline df
EPCenterline_new2 <- EPCenterline_new %>%
left_join(VMT_with_PCI, by = 'index')
EPCenterline_new3 <-
EPCenterline_new2 %>%
left_join(EP_econ %>%
st_drop_geometry(), by = 'GEOID') %>%
left_join(EP_race %>%
st_drop_geometry() %>%
dplyr::select(GEOID, pctWhite), by = 'GEOID') %>%
left_join(EP_ethnicity %>%
st_drop_geometry() %>%
dplyr::select(GEOID, pctNotHL), by = 'GEOID')
numVars <-
EPCenterline_new %>%
dplyr::select(#potholes_count, waze_count, crash_count,
#commenting out census variables while census API is down
#VMT_pop, total_pop.y, med_hh_income, med_rent, pct_transport_to_work, pctWhite, pctNotHL,
Res_Year,potholes_len, waze_len, crash_len) %>%
st_drop_geometry() %>%
na.omit()
ggcorrplot(
round(cor(numVars), 1),
p.mat = cor_pmat(numVars),
colors = c("#25CB10", "white", "#FA7800"),
type="lower",
show.diag = TRUE,
lab = TRUE,
insig = "blank") +
labs(title = "Correlation Matrix for Numeric Variables") +
theme(plot.title = element_text(hjust = 0.5)) +
plotTheme()
ggcorrplot(
round(cor(numVars), 1),
p.mat = cor_pmat(numVars),
colors = c("#0000FF", "white", "#DC143C"),
type="lower",
method = 'circle',
insig = "blank") +
labs(title = "Correlation Matrix for Numeric Variables")
numVars <-
EPCenterline_new %>%
dplyr::select(#potholes_count, waze_count, crash_count,
#commenting out census variables while census API is down
VMT_pop, #total_pop.y, med_hh_income, med_rent, pct_transport_to_work, pctWhite, pctNotHL,
Res_Year,potholes_len, waze_len, crash_len) %>%
st_drop_geometry() %>%
na.omit()
# this works! but takes a while to run - feel free to change to make it faster if you know a better way :)
VMT_centerlines <-
EPCenterline_new %>%
st_join(VMT_sf)
VMT_with_PCI_GEOID <- VMT_centerlines %>%
st_drop_geometry()%>%
group_by(index, GEOID)%>%
dplyr::select(index, GEOID, PCI_2018, VMT_pop)
VMT_with_PCI_GEOID$uniqueID <- 1:nrow(VMT_with_PCI_GEOID)
VMT_with_PCI_index <- VMT_with_PCI_GEOID %>%
group_by(index) %>%
summarize(PCI_2018 = mean(PCI_2018),
uniqueID = min(uniqueID),
VMT_pop = mean(VMT_pop))%>%
dplyr::select(index, uniqueID, PCI_2018, VMT_pop)
View(VMT_with_PCI_index)
VMT_with_PCI <- left_join(VMT_with_PCI_index, VMT_with_PCI_GEOID, by = 'uniqueID')%>%
dplyr::select(index.y,GEOID,PCI_2018.y)%>%
rename(index=index.y,
PCI_2018=PCI_2018.y)
View(VMT_with_PCI)
VMT_with_PCI <- left_join(VMT_with_PCI_index, VMT_with_PCI_GEOID, by = 'uniqueID')%>%
dplyr::select(index.y,GEOID,PCI_2018.y, VMT_Pop.y)%>%
rename(index=index.y,
PCI_2018=PCI_2018.y,
VMT_Pop=VMT_Pop.y)
VMT_with_PCI <- left_join(VMT_with_PCI_index, VMT_with_PCI_GEOID, by = 'uniqueID')
View(VMT_with_PCI)
VMT_with_PCI <- left_join(VMT_with_PCI_index, VMT_with_PCI_GEOID, by = 'uniqueID')%>%
dplyr::select(index.y,GEOID,PCI_2018.y, VMT_Pop.y)%>%
rename(index=index.y,
PCI_2018=PCI_2018.y,
VMT_Pop=VMT_Pop.y)
VMT_with_PCI <- left_join(VMT_with_PCI_index, VMT_with_PCI_GEOID, by = 'uniqueID')%>%
dplyr::select(index.y,GEOID,PCI_2018.y, VMT_Pop.y)
VMT_with_PCI <- left_join(VMT_with_PCI_index, VMT_with_PCI_GEOID, by = 'uniqueID')%>%
dplyr::select(index.y,GEOID,PCI_2018.y, VMT_pop.y)%>%
rename(index=index.y,
PCI_2018=PCI_2018.y,
VMT_Pop=VMT_pop.y)
View(VMT_with_PCI)
#join to epcenterline df
EPCenterline_new2 <- EPCenterline_new %>%
left_join(VMT_with_PCI, by = 'index')
numVars <-
EPCenterline_new %>%
dplyr::select(#potholes_count, waze_count, crash_count,
#commenting out census variables while census API is down
VMT_pop, #total_pop.y, med_hh_income, med_rent, pct_transport_to_work, pctWhite, pctNotHL,
Res_Year,potholes_len, waze_len, crash_len) %>%
st_drop_geometry() %>%
na.omit()
#join to epcenterline df
EPCenterline_new <- EPCenterline_new %>%
left_join(VMT_with_PCI, by = 'index')
EPCenterline_new <-
EPCenterline_new %>%
left_join(EP_econ %>%
st_drop_geometry(), by = 'GEOID') %>%
left_join(EP_race %>%
st_drop_geometry() %>%
dplyr::select(GEOID, pctWhite), by = 'GEOID') %>%
left_join(EP_ethnicity %>%
st_drop_geometry() %>%
dplyr::select(GEOID, pctNotHL), by = 'GEOID')
numVars <-
EPCenterline_new %>%
dplyr::select(#potholes_count, waze_count, crash_count,
#commenting out census variables while census API is down
VMT_pop, #total_pop.y, med_hh_income, med_rent, pct_transport_to_work, pctWhite, pctNotHL,
Res_Year,potholes_len, waze_len, crash_len) %>%
st_drop_geometry() %>%
na.omit()
View(EPCenterline_new)
VMT_with_PCI <- left_join(VMT_with_PCI_index, VMT_with_PCI_GEOID, by = 'uniqueID')%>%
dplyr::select(index.y,GEOID,PCI_2018.y, VMT_pop.y)%>%
rename(index=index.y,
PCI_2018=PCI_2018.y,
VMT_pop=VMT_pop.y)
#join to epcenterline df
EPCenterline_new <- EPCenterline_new %>%
left_join(VMT_with_PCI, by = 'index')
numVars <-
EPCenterline_new %>%
dplyr::select(#potholes_count, waze_count, crash_count,
#commenting out census variables while census API is down
VMT_pop, #total_pop.y, med_hh_income, med_rent, pct_transport_to_work, pctWhite, pctNotHL,
Res_Year,potholes_len, waze_len, crash_len) %>%
st_drop_geometry() %>%
na.omit()
ggcorrplot(
round(cor(numVars), 1),
p.mat = cor_pmat(numVars),
colors = c("#25CB10", "white", "#FA7800"),
type="lower",
show.diag = TRUE,
lab = TRUE,
insig = "blank") +
labs(title = "Correlation Matrix for Numeric Variables") +
theme(plot.title = element_text(hjust = 0.5)) +
plotTheme()
ggcorrplot(
round(cor(numVars), 1),
p.mat = cor_pmat(numVars),
colors = c("#0000FF", "white", "#DC143C"),
type="lower",
method = 'circle',
insig = "blank") +
labs(title = "Correlation Matrix for Numeric Variables")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, results = FALSE, message = FALSE)
library(tidyverse)
library(sf)
library(lubridate)
library(tigris)
library(tidycensus)
library(gganimate)
library(viridis)
library(riem)
library(gridExtra)
library(knitr)
library(kableExtra)
library(RSocrata)
library(caret)
library(purrr)
library(FNN)
library(stargazer)
library(dplyr)
library(spatstat)
library(raster)
library(spdep)
library(grid)
library(mapview)
library(stringr)
library(ggcorrplot)
library(scales)
library(colorspace)
library(rgdal)
library(RColorBrewer)
library(rasterVis)
library(sp)
palette_5 <- c("#0c1f3f", "#08519c", "#3bf0c0", "#e6a52f", "#e76420")
palette_5blues <-c("#eff3ff","#bdd7e7","#6baed6","#3182bd","#08519c")
palette_4 <-c("#08519c","#3bf0c0","#e6a52f","#e76420")
palette_2 <-c("#e6a52f","#08519c")
palette_3 <-c("#e6a52f","#08519c", "#e76420")
mapTheme <- function(base_size = 12) {
theme(
text = element_text( color = "black"),
plot.title = element_text(size = 16,colour = "black"),
plot.subtitle=element_text(face="italic"),
plot.caption=element_text(hjust=0),
axis.ticks = element_blank(),
panel.background = element_blank(),axis.title = element_blank(),
axis.text = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(colour = "black", fill=NA, size=2),
strip.text.x = element_text(size = 14))
}
plotTheme <- function(base_size = 12) {
theme(
text = element_text( color = "black"),
plot.title = element_text(size = 16,colour = "black"),
plot.subtitle = element_text(face="italic"),
plot.caption = element_text(hjust=0),
axis.ticks = element_blank(),
panel.background = element_blank(),
panel.grid.major = element_line("grey80", size = 0.1),
panel.grid.minor = element_blank(),
panel.border = element_rect(colour = "black", fill=NA, size=2),
strip.background = element_rect(fill = "grey80", color = "white"),
strip.text = element_text(size=12),
axis.title = element_text(size=12),
axis.text = element_text(size=10),
plot.background = element_blank(),
legend.background = element_blank(),
legend.title = element_text(colour = "black", face = "italic"),
legend.text = element_text(colour = "black", face = "italic"),
strip.text.x = element_text(size = 14)
)
}
# UNCOMMENT THE LINE BELOW IF YOU ARE RUNNING THE RMD
#source("C:/Users/CSS/Desktop/MUSA801/Sisun.R")
# UNCOMMENT THE LINE BELOW IF YOU ARE RUNNING THE RMD
#source("Jenna.R")
# UNCOMMENT THE LINE BELOW IF YOU ARE RUNNING THE RMD
source("Kristin.R")
# Projection CRS: ESRI 102339 (NAD_1983_HARN_StatePlane_Texas_Central_FIPS_4203).
CIP_layer <- st_read("Data/Resurfacing/CIP_PRogram_Master_Layer.shp") %>%
st_transform('ESRI:102339')
centerline_with_age <- st_read("Data/PCI_Study/Centerline_with_Age.shp") %>%
st_transform('ESRI:102339')
EPCenterline <- st_read("Data/Penn/EPCenterline.shp") %>%
st_transform('ESRI:102339')
zoning <- st_read("Data/Penn/Zoning.shp") %>%
st_transform('ESRI:102339')
# Saved as .csv from file 'POTHOLES2013_2021.xls'
potholes <- read_csv("Data/POTHOLES2013_2021.csv")
# Sheet 'Waze for Cities Data _ Key Aler' saved as .csv from file 'Waze for Cities Data _ Key Alerts Dashboard_Traffic Alerts_Table.xlsx'
waze_data <- read_csv("Data/Waze for Cities Data3.csv")
VMT <- read_csv("Data/ElPaso_VMT_res_bg.csv")
crash18 <- st_read("Data/CRIS2018/CRIS2018.shp")
roadbed_base <- st_read("Data/Roadbed_Base/Roadbed_Base.shp")
roadbed_surface <- st_read("Data/Roadbed_Surface/Roadbed_Surface.shp")
land_use <- st_read("Data/LandUse_KCedits.csv")
# Note: The "el_paso_pass2" shapefile is too large for our GitHub repository, so it is read in for each team member using .source() - each person has a source file with local file paths and keys.
#comparing TIGER/Line shapefile to the street centerlines shapefile from Alex
tl_roads <- st_read("Data/tl_2018_roads/tl_2018_48141_roads.shp") %>%
st_transform('ESRI:102339')
EPcity_landcover <-
raster("Data/Data_NLCD/ElPasoArea_LandCover_ImperviousCover/NLCD_2019_Land_Cover_L48_20210604_hHjclStONh9yCsFQkZ5z.tiff")
texas <-
st_read("Data/TexasCountiesMap.geojson")
# County Level
El_Paso <-
texas %>%
filter(name=='El Paso') %>%
st_as_sf(coords = the_geom.coordinates, crs = 4326, agr = "constant") %>%
st_transform('ESRI:102339')
# City Level
El_Paso_city <-
st_read("Data/TxDOT_City_Boundaries.geojson") %>%
filter(CITY_NM=='El Paso') %>%
st_transform('ESRI:102339')
# census data
#variable list for ACS 2019 5 year data
ACSvar <- load_variables(year = 2019, dataset = "acs5", cache = TRUE)
#loading race data by tract - use E variables for estimate values
EP_race_county <-
get_acs(geography = "tract",
variables = c("B01003_001E", #total_pop
"B02001_002E", #white alone
"B02001_003E", #black or african american
"B02001_004E", #american indian or alaska native
"B02001_005E", #asian alone
"B02001_006E", #native hawaiian or pacific islander
"B02001_007E", #some other race
"B02001_008E"), #two or more races
year = 2019,
state = 48,      # 48 for Texas
geometry = TRUE,
county = 141, # 141 for El Paso county
output = "wide") %>%
rename(total_pop =  B01003_001E,
white = B02001_002E,
black = B02001_003E,
NAT = B02001_004E,
asian = B02001_005E,
PI = B02001_006E,
other = B02001_007E,
two_plus = B02001_008E) %>%
dplyr::select("GEOID","NAME","total_pop","white","black","NAT","asian","PI","other","two_plus","geometry")%>% #drop MOE columns
mutate(pctWhite = white/total_pop*100,
pctBlack = black/total_pop*100,
pctNAT = NAT/total_pop*100,
pctAsian = asian/total_pop*100,
pctPI = PI/total_pop*100,
pctOther = other/total_pop*100,
pctTwo_plus = two_plus/total_pop*100)
census_api_key("d9eb52b3755db802bb6aa16b739687dde1e42613", overwrite=TRUE)
#loading race data by tract - use E variables for estimate values
EP_race_county <-
get_acs(geography = "tract",
variables = c("B01003_001E", #total_pop
"B02001_002E", #white alone
"B02001_003E", #black or african american
"B02001_004E", #american indian or alaska native
"B02001_005E", #asian alone
"B02001_006E", #native hawaiian or pacific islander
"B02001_007E", #some other race
"B02001_008E"), #two or more races
year = 2019,
state = 48,      # 48 for Texas
geometry = TRUE,
county = 141, # 141 for El Paso county
output = "wide") %>%
rename(total_pop =  B01003_001E,
white = B02001_002E,
black = B02001_003E,
NAT = B02001_004E,
asian = B02001_005E,
PI = B02001_006E,
other = B02001_007E,
two_plus = B02001_008E) %>%
dplyr::select("GEOID","NAME","total_pop","white","black","NAT","asian","PI","other","two_plus","geometry")%>% #drop MOE columns
mutate(pctWhite = white/total_pop*100,
pctBlack = black/total_pop*100,
pctNAT = NAT/total_pop*100,
pctAsian = asian/total_pop*100,
pctPI = PI/total_pop*100,
pctOther = other/total_pop*100,
pctTwo_plus = two_plus/total_pop*100)
#clip to city bound
EP_race_county <- EP_race_county  %>%
st_transform('ESRI:102339')
EP_race <- st_intersection(EP_race_county, El_Paso_city)
#loading ethnicity data by tract - use E variables for estimate values
EP_ethnicity_county <-
get_acs(geography = "tract",
variables = c("B01003_001E", #total_pop
"B03001_002E", #not hispanic or latino
"B03001_003E"), #hispanic or latino
year = 2019,
state = 48,
geometry = TRUE,
county = 141,
output = "wide") %>%
rename(total_pop =  B01003_001E,
notHL = B03001_002E,
HL = B03001_003E) %>%
dplyr::select("GEOID","NAME","total_pop","notHL","HL","geometry")%>% #drop MOE columns
mutate(pctNotHL = notHL/total_pop*100,
pctHL = HL/total_pop*100)
#clip to city bound
EP_ethnicity_county <- EP_ethnicity_county  %>%
st_transform('ESRI:102339')
#loading age data by tract - use E variables for estimate values
ageVar <- ACSvar %>%
filter(concept=="SEX BY AGE")
ageVar <- ageVar %>% dplyr::select(name)
ageVar <- as.list(ageVar$name)%>%
paste0("E")
EP_age_county <-
get_acs(geography = "tract",
variables = ageVar,
year = 2019,
state = 48,
geometry = TRUE,
county = 141,
output = "wide")%>%
dplyr::select("GEOID","NAME",all_of(ageVar),"geometry")
census_api_key("d9eb52b3755db802bb6aa16b739687dde1e42613", overwrite=TRUE)
EP_age_county <-
get_acs(geography = "tract",
variables = ageVar,
year = 2019,
state = 48,
geometry = TRUE,
county = 141,
output = "wide")%>%
dplyr::select("GEOID","NAME",all_of(ageVar),"geometry")
