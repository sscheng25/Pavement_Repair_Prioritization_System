str_detect(EP_age_long$variable, "Male") ~ "Male",
str_detect(EP_age_long$variable, "Female") ~ "Female",
TRUE ~ "Total"))
EP_age_long_nototal<-EP_age_long[!(EP_age_long$Sex=="Total" | EP_age_long$variable=="Total_Male_" | EP_age_long$variable=="Total_Female_"),]
for (i in 1:nrow(EP_age_long_nototal)) {
if (EP_age_long_nototal$Sex[i] == "Male") {
EP_age_long_nototal[i, "variable"] <- substr(EP_age_long_nototal[i, "variable"], 12, 99)[1]
}
else {
EP_age_long_nototal[i, "variable"] <- substr(EP_age_long_nototal[i, "variable"], 14, 99)[1]
}
}
pop_pyramid <-
EP_age_long_nototal %>%
transform(value = as.numeric(value)) %>%
group_by(variable, Sex) %>%
summarise(value = sum(value))
pop_pyramid$variable[pop_pyramid$variable == "Under 5 years"] <- "005 years and less"
pop_pyramid$variable[pop_pyramid$variable == "5 to 9 years"] <- "05 to 9 years"
pop_pyramid$variable[pop_pyramid$variable == "15 to 17 years" | pop_pyramid$variable == "18 and 19 years"] <- "15 to 19 years"
pop_pyramid$variable[pop_pyramid$variable == "20 years" | pop_pyramid$variable == "21 years" | pop_pyramid$variable == "22 to 24 years"] <- "20 to 24 years"
pop_pyramid$variable[pop_pyramid$variable == "60 and 61 years" | pop_pyramid$variable == "62 to 64 years"] <- "60 to 64 years"
pop_pyramid$variable[pop_pyramid$variable == "65 and 66 years" | pop_pyramid$variable == "67 to 69 years"] <- "65 to 69 years"
ggplot(pop_pyramid, aes(x = variable, fill = Sex,
y = ifelse(test = Sex == "Male",
yes = -value, no = value))) +
geom_bar(stat = "identity") +
# geom_line(aes(x = "15 to 19 years"), color = "red", size=1) +
scale_y_continuous(labels = abs, limits = max(pop_pyramid$value) * c(-1,1)) +
scale_fill_manual(values=palette_2)+
labs(title = "Population Pyramid", x = "Age Group", y = "Population by Gender") +
coord_flip() + plotTheme()
#plotting census demographics data
#race map
race_long <- EP_race%>%
dplyr::select(GEOID,NAME, pctWhite, pctBlack, pctNAT, pctAsian, pctPI, pctOther, pctTwo_plus)%>%
gather(variable, value, -geometry, -GEOID, -NAME)
race_vars <- unique(race_long$variable)
mapList <- list()
for(i in race_vars){
mapList[[i]] <-
ggplot() +
geom_sf(data = filter(race_long, variable == i), aes(fill=value), colour=NA) +
scale_fill_viridis(option='G',name="") +
labs(title=i) +
mapTheme()}
do.call(grid.arrange,c(mapList, ncol = 4, top = "Race by Census Tract"))
#ethnicity map - Hispanic or Latino
ggplot()+
geom_sf(data=EP_ethnicity, aes(fill=pctHL), color="grey")+
scale_fill_viridis(option='G', direction=-1)+
labs(title="Percent Hispanic or Latino in 2019",
fill="% Hispanic \nor Latino",
subtitle="Census Tracts in El Paso, TX",
caption = "Source: US Census, ACS 2019") + mapTheme()
EP_econ_county <-
get_acs(geography = "tract",
variables = c("B19013_001E", #median household income
"B25058_001E", #median rent
"B08301_001E", #people who have means of transportation to work
"B01003_001E"), #total pop
year = 2019,
state = 48,      # 48 for Texas
geometry = TRUE,
county = 141,    # 141 for El Paso county
output = "wide") %>%
rename(total_pop =  B01003_001E,
med_hh_income = B19013_001E,
med_rent = B25058_001E,
transport_to_work = B08301_001E) %>%
dplyr::select("GEOID","NAME","total_pop","med_hh_income","med_rent","transport_to_work","geometry")%>% #drop MOE columns
mutate(pct_transport_to_work = (ifelse(total_pop > 0, transport_to_work / total_pop,0))*100)
#clip to city bound
EP_econ_county <- EP_econ_county %>%
st_transform('ESRI:102339')
EP_econ <- st_intersection(EP_econ_county, El_Paso_city)
econ_long <- EP_econ%>%
dplyr::select(GEOID,NAME, med_hh_income, med_rent, pct_transport_to_work)%>%
gather(variable, value, -geometry, -GEOID, -NAME)
# econ_vars <- unique(econ_long$variable)
# mapList_econ <- list()
#
# for(i in econ_vars){
#   mapList_econ[[i]] <-
#     ggplot() +
#       geom_sf(data = filter(econ_long, variable == i), aes(fill=value), colour=NA) +
#       scale_fill_viridis(option='G',name="") +
#       labs(title=i) + mapTheme()
#       }
#
# do.call(grid.arrange,c(mapList_econ, ncol = 3, top = "Selected Socioeconomics by Census Tract", bottom = "Source: US Census, ACS 2019"))
#Median household income
ggplot()+
geom_sf(data=EP_econ, aes(fill=med_hh_income), color="grey")+
scale_fill_viridis(option='G', direction=-1)+
labs(title="Median Household Income in 2019",
fill="Dollars ($)",
subtitle="Census Tracts in El Paso, TX", caption="Source: US Census, ACS 2019\n\nNote: Gray tracts indicate no data") + mapTheme()
#Median rent
ggplot()+
geom_sf(data=EP_econ, aes(fill=med_rent), color="grey")+
scale_fill_viridis(option='G', direction= -1)+
labs(title="Median Rent in 2019",
fill="Dollars ($)",
subtitle="Census Tracts in El Paso, TX", caption="Source: US Census, ACS 2019n\nNote: Gray tracts indicate no data") + mapTheme()
#pct transport to work map
ggplot()+
geom_sf(data=EP_econ, aes(fill=pct_transport_to_work), color="grey")+
scale_fill_viridis(option='G', direction=-1)+
labs(title="Percent Population with Transportation to Work in 2019",
fill="% Transport to Work",
subtitle="Census Tracts in El Paso, TX", caption="Source: US Census, ACS 2019") + mapTheme()
save(EP_age, file="EP_age.RData")
save(EP_age_new, file="EP_age_new.RData")
save(EP_age_long, file="EP_age_long.RData")
save(EP_econ, file="EP_econ.RData")
save(EP_ethnicity, file="EP_ethnicity.RData")
save(EP_race, file="EP_race.RData")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, results = FALSE, message = FALSE)
library(tidyverse)
library(sf)
library(lubridate)
library(tigris)
library(tidycensus)
library(gganimate)
library(viridis)
library(riem)
library(gridExtra)
library(knitr)
library(kableExtra)
library(RSocrata)
library(caret)
library(purrr)
library(FNN)
library(stargazer)
library(dplyr)
library(spatstat)
library(raster)
library(spdep)
library(grid)
library(mapview)
library(stringr)
library(ggcorrplot)
library(scales)
library(colorspace)
library(rgdal)
library(RColorBrewer)
library(rasterVis)
library(sp)
library(ggpubr)
library(leaflet)
library(gganimate)
library(gifski)
library(transformr)
library(jtools)
library(stringr)
library(randomForest)
library(e1071)  # SVM
library(xgboost)
library(readr)
library(car)
palette_5 <- c("#0c1f3f", "#08519c", "#3bf0c0", "#e6a52f", "#e76420")
palette_5blues <-c("#eff3ff","#bdd7e7","#6baed6","#3182bd","#08519c")
palette_4 <-c("#08519c","#3bf0c0","#e6a52f","#e76420")
palette_2 <-c("#e6a52f","#08519c")
palette_3 <-c("#e6a52f","#08519c", "#e76420")
source("https://raw.githubusercontent.com/urbanSpatial/Public-Policy-Analytics-Landing/master/functions.r")
mapTheme <- function(base_size = 12) {
theme(
text = element_text( color = "black"),
plot.title = element_text(size = 16,colour = "black"),
plot.subtitle=element_text(face="italic"),
plot.caption=element_text(hjust=0),
axis.ticks = element_blank(),
panel.background = element_blank(),axis.title = element_blank(),
axis.text = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(colour = "black", fill=NA, size=2),
strip.text.x = element_text(size = 14))
}
plotTheme <- function(base_size = 12) {
theme(
text = element_text( color = "black"),
plot.title = element_text(size = 16,colour = "black"),
plot.subtitle = element_text(face="italic"),
plot.caption = element_text(hjust=0),
axis.ticks = element_blank(),
panel.background = element_blank(),
panel.grid.major = element_line("grey80", size = 0.1),
panel.grid.minor = element_blank(),
panel.border = element_rect(colour = "black", fill=NA, size=2),
strip.background = element_rect(fill = "grey80", color = "white"),
strip.text = element_text(size=12),
axis.title = element_text(size=12),
axis.text = element_text(size=10),
plot.background = element_blank(),
legend.background = element_blank(),
legend.title = element_text(colour = "black", face = "italic"),
legend.text = element_text(colour = "black", face = "italic"),
strip.text.x = element_text(size = 14)
)
}
# RData from EDA part, please make sure to run this properly
# load("Data/EDA.RData")
# OPTIONAL BELOW:
# modelling_0325.RData contains all the model in this Rmd file, if you do not wish to run through all the models below and just want to take a quick look at the model results, you can download the RData file here(https://drive.google.com/file/d/15yaeGVxl-Wnh78o9jxEzRJgCwMT7taa8/view?usp=sharing), save it in the corresponding root and load it.
load("Data/modelling_0325.RData")
amenity <- read.csv("Data/OSM_amenities/OSM_amenity.csv")
amenity_sf <-
amenity %>%
st_as_sf(coords = c("lon", "lat"), crs = 4326, agr = "constant") %>%
st_transform('ESRI:102339')
food_drink <- c('restaurant', 'fast_food', 'cafe', 'bar', 'ice_cream', 'pub')
entertainment <- c('arts_centre', 'cinema', 'theatre')
car_facility <- c('fuel', 'car_rental', 'car_wash', 'parking', 'parking_space')
am_food_drink <- amenity_sf %>%
filter(amenity %in% food_drink)
am_entertainment <- amenity_sf %>%
filter(amenity %in% entertainment)
am_car_facility <- amenity_sf %>%
filter(amenity %in% car_facility)
# KNN function
st_c <- st_coordinates
EPCenterline_new6 <-
EPCenterline_new5 %>%
mutate(
food_drink_nn3 = nn_function(na.omit(st_c(st_centroid(EPCenterline_new5))),na.omit(st_c(am_food_drink)), 3),
entertainment_nn3 = nn_function(na.omit(st_c(st_centroid(EPCenterline_new5))),na.omit(st_c(am_entertainment)), 3),
car_facility_nn3 = nn_function(na.omit(st_c(st_centroid(EPCenterline_new5))),na.omit(st_c(am_car_facility)), 3),
)
EPCenterline_new6 %>%
st_drop_geometry() %>%
dplyr::select(PCI_2018, food_drink_nn3, entertainment_nn3, car_facility_nn3) %>%
gather(Variable, Value, -PCI_2018) %>%
ggplot(aes(Value, PCI_2018)) +
geom_point(size = 0.5, color = "grey") +
geom_smooth(method = "lm", se=F, colour = "#3FB0C0") +
facet_wrap(~Variable, ncol = 3, scales = "free") +
labs(title = "Nearest Neighbor Variables vs. PCI",
subtitle = "El Paso, TX") +
stat_cor(aes(label = ..r.label..), label.x = 0) +
plotTheme()
prelim_floodzones_2020 <- st_read("Data/PrelimFloodZone2020/PrelimFloodZone2020.shp" )%>%
st_transform('ESRI:102339')
# clip flood zones to city bounds
EPcity_prelim_floodzones_2020 <- st_intersection(prelim_floodzones_2020, El_Paso_city)
EPcity_prelim_floodzones_2020 <- EPcity_prelim_floodzones_2020 %>% dplyr::filter(EPcity_prelim_floodzones_2020$STUDY_TYP == "SFHAs WITH HIGH FLOOD RISK")
EPCenterline_new6 <- EPCenterline_new6 %>% mutate(n_floodzone_int = lengths(st_intersects(EPCenterline_new6, EPcity_prelim_floodzones_2020)))
# adding a column for yes or no for if intersected a flood zone area at all or not
EPCenterline_new6 <-
EPCenterline_new6 %>%
mutate(floodzone_highrisk = ifelse(EPCenterline_new6$n_floodzone_int > 0, "Yes", "No"))
# Create dummy variable
EPCenterline_new6$road_age_dummy <- ifelse(EPCenterline_new6$road_age >= 20, 1, 0)
# run a baby model
#OLS_reg_roadageonly <- lm(PCI_2018 ~ road_age_dummy, data = EPCenterline_new6)
#stargazer(OLS_reg_roadageonly, type = "text",title = "OLS Regression Results", align=TRUE, no.space=TRUE)
#summary(OLS_reg_roadageonly)
#read in new data
crash16 <- st_read("Data/CRIS2016/CRIS2016.shp")
crash17<- st_read("Data/CRIS2017/CRIS2017.shp")
crash19<- st_read("Data/CRIS2019/CRIS2019.shp")
crash20<- st_read("Data/CRIS2020/CRIS2020.shp")
crash21<- st_read("Data/CRIS2021/CRIS2021.shp")
#combine past years
crash16_18 <- rbind(crash16, crash17, crash18)
crash19_21 <- rbind(crash19, crash20, crash21)
#replace 0s in lat long columns with NA so we can omit
crash16_18trim<-crash16_18[!(crash16_18$Latitude==0 | crash16_18$Longitude==0),]
crash19_21trim<-crash19_21[!(crash19_21$Latitude==0 | crash19_21$Longitude==0),]
#transforming to our crs
crash16_18sf <- crash16_18trim %>%
na.omit() %>%
st_as_sf(coords = c("Latitude", "Longitude"),
crs = 'epsg:2277',
agr = "constant") %>%
st_transform('ESRI:102339')
crash19_21sf <- crash19_21trim %>%
na.omit() %>%
st_as_sf(coords = c("Latitude", "Longitude"),
crs = 'epsg:2277',
agr = "constant") %>%
st_transform('ESRI:102339')
#join crashes to EPCenterline using nearest feature
crash_centerlines16_18 <-  st_join(crash16_18sf, EPCenterline_buffer, join = st_nearest_feature)
crash_centerlines19_21 <-  st_join(crash19_21sf, EPCenterline_buffer, join = st_nearest_feature)
#clean up to make it easier
crash_centerlines_clean16_18 <- crash_centerlines16_18 %>%
dplyr::select(Crash_ID, index) %>% st_drop_geometry()
crash_centerlines_clean19_21 <- crash_centerlines19_21 %>%
dplyr::select(Crash_ID, index) %>% st_drop_geometry()
#drop old columns
EPCenterline_new6 <- subset(EPCenterline_new6, select= -c(crash_count,crash_len))
# count crashes per street segment
crash_groupings16_18 <- crash_centerlines_clean16_18 %>%
group_by(index) %>%
summarize(crash_count16_18=n())
crash_groupings19_21 <- crash_centerlines_clean19_21 %>%
group_by(index) %>%
summarize(crash_count19_21=n())
# for 2016-2018...
# then join back to initial EPCenterline using index as the ID
EPCenterline_new6 <- merge(EPCenterline_new6, crash_groupings16_18, by = "index", all.x=TRUE)
# replace NAs in crash count column with 0
EPCenterline_new6$crash_count16_18[is.na(EPCenterline_new6$crash_count16_18)] <- 0
# calculate crashes per 100 meters
EPCenterline_new6 <-
EPCenterline_new6 %>%
mutate(crash_len16_18 = crash_count16_18*100/pave_length)
# convert to numeric
EPCenterline_new6$crash_len16_18 <- as.numeric(as.character(EPCenterline_new6$crash_len16_18))
# then again for 2019-2021...
# then join back to initial EPCenterline using index as the ID
EPCenterline_new6 <- merge(EPCenterline_new6, crash_groupings19_21, by = "index", all.x=TRUE)
# replace NAs in crash count column with 0
EPCenterline_new6$crash_count19_21[is.na(EPCenterline_new6$crash_count19_21)] <- 0
# calculate crashes per 100 meters
EPCenterline_new6 <-
EPCenterline_new6 %>%
mutate(crash_len19_21 = crash_count19_21*100/pave_length)
# convert to crash_len19_21
EPCenterline_new6$crash_len19_21 <- as.numeric(as.character(EPCenterline_new6$crash_len19_21))
#rename target column and drop unneccessary columns
roadbed_base_PCI <- roadbed_base_PCI %>%
mutate(rb_base = BASE_TYPE_)%>%
dplyr::select(index, rb_base)%>%
st_drop_geometry()
roadbed_surface_PCI <- roadbed_surface_PCI %>%
mutate(rb_surface = SRFC_TYPE)%>%
dplyr::select(index, rb_surface)%>%
st_drop_geometry()
roadbed_base_PCI <- roadbed_base_PCI %>%
group_by(index)%>%
summarize(rb_base = first(rb_base))
roadbed_surface_PCI <- roadbed_surface_PCI %>%
group_by(index)%>%
summarize(rb_surface = first(rb_surface))
roadbed_surface_PCI$rb_surface <- str_to_title(roadbed_surface_PCI$rb_surface)
#join to EPCenterline_new6
EPCenterline_new6 <- left_join(EPCenterline_new6, roadbed_base_PCI, on="index")
EPCenterline_new6 <- left_join(EPCenterline_new6, roadbed_surface_PCI, on="index")
#change NA values to unknown category
EPCenterline_new6[,c("rb_base","rb_surface")][is.na(EPCenterline_new6[,c("rb_base","rb_surface")])] <- "Unknown"
#drop old columns
EPCenterline_new6 <- subset(EPCenterline_new6, select= -c(potholes_count,potholes_len))
#clean up potholes grouping dfs
potholes_sf_2016to2018 <- subset(potholes_sf_2016to2018, select= c(YEAR, geometry, WORKORDERID))
potholes_sf_2019to2021 <- subset(potholes_sf_2019to2021, select= c(YEAR, geometry, WORKORDERID))
#join potholes to EPCenterline using nearest feature
potholes_centerlines_2016to2018 <-  st_join(potholes_sf_2016to2018, EPCenterline_buffer, join = st_nearest_feature)
potholes_centerlines_2019to2021 <-  st_join(potholes_sf_2019to2021, EPCenterline_buffer, join = st_nearest_feature)
#clean up to make it easier
potholes_centerlines_clean_2016to2018 <- potholes_centerlines_2016to2018 %>%
dplyr::select(WORKORDERID, index) %>% st_drop_geometry()
potholes_centerlines_clean_2019to2021 <- potholes_centerlines_2019to2021 %>%
dplyr::select(WORKORDERID, index) %>% st_drop_geometry()
# count potholes per street segment
potholes_groupings_2016to2018 <- potholes_centerlines_clean_2016to2018 %>%
group_by(index) %>%
summarize(potholes_count16_18=n())
potholes_groupings_2019to2021 <- potholes_centerlines_clean_2019to2021 %>%
group_by(index) %>%
summarize(potholes_count19_21=n())
# for 2016-2018...
# then join back to initial EPCenterline using index as the ID
EPCenterline_new6 <- merge(EPCenterline_new6, potholes_groupings_2016to2018, by = "index", all.x=TRUE)
# replace NAs in potholes count column with 0
EPCenterline_new6$potholes_count16_18[is.na(EPCenterline_new6$potholes_count16_18)] <- 0
# calculate potholes per 100 meters
EPCenterline_new6 <-
EPCenterline_new6 %>%
mutate(potholes_len16_18 = potholes_count16_18*100/pave_length)
# convert to numeric
EPCenterline_new6$potholes_len16_18 <- as.numeric(as.character(EPCenterline_new6$potholes_len16_18))
# for 2019-2021...
# then join back to initial EPCenterline using index as the ID
EPCenterline_new6 <- merge(EPCenterline_new6, potholes_groupings_2019to2021, by = "index", all.x=TRUE)
# replace NAs in potholes count column with 0
EPCenterline_new6$potholes_count19_21[is.na(EPCenterline_new6$potholes_count19_21)] <- 0
# calculate potholes per 100 meters
EPCenterline_new6 <-
EPCenterline_new6 %>%
mutate(potholes_len19_21 = potholes_count19_21*100/pave_length)
# convert to numeric
EPCenterline_new6$potholes_len19_21 <- as.numeric(as.character(EPCenterline_new6$potholes_len19_21))
func_class <- st_read("Data/ElPaso_Func_Class/ElPaso_Func_Class.shp")
View(func_class)
func_class$FC_DESC.unique()
unique(func_class$FC_DESC)
major_FCs <- c("Major Collector", "Principal Arterial - Other", "Interstate", "Principal Arterial - (Other Freeways and Expressways)")
major_arterials <- func_class%>%
filter(FC_DESC == major_FCs)
View(major_arterials)
nearest_major_arterial <- st_nearest_feature(EPCenterline_new6, major_arterials)
func_class <- st_read("Data/ElPaso_Func_Class/ElPaso_Func_Class.shp")%>%
st_transform('ESRI:102339')
major_FCs <- c("Major Collector", "Principal Arterial - Other", "Interstate", "Principal Arterial - (Other Freeways and Expressways)")
major_arterials <- func_class%>%
filter(FC_DESC == major_FCs)
#return index of nearest feat in major_arterials to each feature in EPCenterline
nearest_major_arterial <- st_nearest_feature(EPCenterline_new6, major_arterials)
EPCenterline_new6 <- EPCenterline_new6 %>%
mutate(dist_major_arterial = st_distance(EPCenterline_new6, major_arterials[nearest_major_arterial,], by_element=TRUE))
ggplot() +
geom_sf(data = El_Paso_city, fill="transparent", color="grey") +
geom_sf(data = EPCenterline_new6, aes(color = dist_major_arterial))
View(EPCenterline_new6)
ggplot() +
geom_sf(data = El_Paso_city, fill="transparent", color="grey") +
geom_sf(data = EPCenterline_new6, aes(dist_major_arterial))
ggplot() +
geom_sf(data = El_Paso_city, fill="transparent", color="grey") +
geom_sf(data = EPCenterline_new6, aes(dist_major_arterial))+
plotTheme()
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, results = FALSE, message = FALSE)
library(tidyverse)
library(sf)
library(lubridate)
library(tigris)
library(tidycensus)
library(gganimate)
library(viridis)
library(riem)
library(gridExtra)
library(knitr)
library(kableExtra)
library(RSocrata)
library(caret)
library(purrr)
library(FNN)
library(stargazer)
library(dplyr)
library(spatstat)
library(raster)
library(spdep)
library(grid)
library(mapview)
library(stringr)
library(ggcorrplot)
library(scales)
library(colorspace)
library(rgdal)
library(RColorBrewer)
library(rasterVis)
library(sp)
library(ggpubr)
library(leaflet)
library(gganimate)
library(gifski)
library(transformr)
library(jtools)
library(stringr)
library(randomForest)
library(e1071)  # SVM
library(xgboost)
library(readr)
library(car)
palette_5 <- c("#0c1f3f", "#08519c", "#3bf0c0", "#e6a52f", "#e76420")
palette_5blues <-c("#eff3ff","#bdd7e7","#6baed6","#3182bd","#08519c")
palette_4 <-c("#08519c","#3bf0c0","#e6a52f","#e76420")
palette_2 <-c("#e6a52f","#08519c")
palette_3 <-c("#e6a52f","#08519c", "#e76420")
source("https://raw.githubusercontent.com/urbanSpatial/Public-Policy-Analytics-Landing/master/functions.r")
mapTheme <- function(base_size = 12) {
theme(
text = element_text( color = "black"),
plot.title = element_text(size = 16,colour = "black"),
plot.subtitle=element_text(face="italic"),
plot.caption=element_text(hjust=0),
axis.ticks = element_blank(),
panel.background = element_blank(),axis.title = element_blank(),
axis.text = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(colour = "black", fill=NA, size=2),
strip.text.x = element_text(size = 14))
}
plotTheme <- function(base_size = 12) {
theme(
text = element_text( color = "black"),
plot.title = element_text(size = 16,colour = "black"),
plot.subtitle = element_text(face="italic"),
plot.caption = element_text(hjust=0),
axis.ticks = element_blank(),
panel.background = element_blank(),
panel.grid.major = element_line("grey80", size = 0.1),
panel.grid.minor = element_blank(),
panel.border = element_rect(colour = "black", fill=NA, size=2),
strip.background = element_rect(fill = "grey80", color = "white"),
strip.text = element_text(size=12),
axis.title = element_text(size=12),
axis.text = element_text(size=10),
plot.background = element_blank(),
legend.background = element_blank(),
legend.title = element_text(colour = "black", face = "italic"),
legend.text = element_text(colour = "black", face = "italic"),
strip.text.x = element_text(size = 14)
)
}
# RData from EDA part, please make sure to run this properly
# load("Data/EDA.RData")
# OPTIONAL BELOW:
# modelling_0325.RData contains all the model in this Rmd file, if you do not wish to run through all the models below and just want to take a quick look at the model results, you can download the RData file here(https://drive.google.com/file/d/15yaeGVxl-Wnh78o9jxEzRJgCwMT7taa8/view?usp=sharing), save it in the corresponding root and load it.
load("Data/modelling_0325.RData")
View(EPCenterline_new6)
save(EPCenterline_new6, file="EPCenterline_new6.RData")
View(waze_data)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, results = FALSE, message = FALSE)
load("Data/EPCenterline_new6.RData")
