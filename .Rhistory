for (i in 1:nrow(EP_age_long_nototal)) {
if (EP_age_long_nototal$Sex == "Male") {
EP_age_long_nototal[i, "variable"] <- substr(EP_age_long_nototal[i, "variable"], 12, 99)[1]
}
else {
EP_age_long_nototal[i, "variable"] <- substr(EP_age_long_nototal[i, "variable"], 14, 99)[1]
}
}
# Another attempt, still failed
EP_age_long <- EP_age_long %>%
dplyr::mutate(pop =
case_when(
str_detect(Sex, "Male") ~ substr(variable, 12, 99)[1],
str_detect(Sex, "Female") ~ substr(variable, 14, 99)[1]))
glimpse(EP_age_long)
unique(EP_age_long_nototal$pop)
pop_pyramid <-
EP_age_long_nototal %>%
group_by(variable, Sex) %>%
summarise(value = sum(value))
#plotting census demographics data
#race map
race_long <- EP_race%>%
dplyr::select(GEOID,NAME, pctWhite, pctBlack, pctNAT, pctAsian, pctPI, pctOther, pctTwo_plus)%>%
gather(variable, value, -geometry, -GEOID, -NAME)
race_vars <- unique(race_long$variable)
mapList <- list()
for(i in race_vars){
mapList[[i]] <-
ggplot() +
geom_sf(data = filter(race_long, variable == i), aes(fill=value), colour=NA) +
scale_fill_viridis(name="") +
labs(title=i) +
mapTheme()}
do.call(grid.arrange,c(mapList, ncol = 4, top = "Race by Census Tract"))
#ethnicity map - Hispanic or Latino
ggplot()+
geom_sf(data=EP_ethnicity, aes(fill=pctHL))+
scale_fill_viridis()+
labs(title="Percent Hispanic or Latino in 2019",
subtitle="Census Tracts in El Paso, TX",
caption = "Source: US Census, ACS 2019") + mapTheme()
EP_econ_county <-
get_acs(geography = "tract",
variables = c("B19013_001E", #median household income
"B25058_001E", #median rent
"B08301_001E", #people who have means of transportation to work
"B01003_001E"), #total pop
year = 2019,
state = 48,      # 48 for Texas
geometry = TRUE,
county = 141,    # 141 for El Paso county
output = "wide") %>%
rename(total_pop =  B01003_001E,
med_hh_income = B19013_001E,
med_rent = B25058_001E,
transport_to_work = B08301_001E) %>%
dplyr::select("GEOID","NAME","total_pop","med_hh_income","med_rent","transport_to_work","geometry")%>% #drop MOE columns
mutate(pct_transport_to_work = (ifelse(total_pop > 0, transport_to_work / total_pop,0))*100)
#clip to city bound
EP_econ_county <- EP_econ_county %>%
st_transform('ESRI:102339')
EP_econ <- st_intersection(EP_econ_county, El_Paso_city)
econ_long <- EP_econ%>%
dplyr::select(GEOID,NAME, med_hh_income, med_rent, pct_transport_to_work)%>%
gather(variable, value, -geometry, -GEOID, -NAME)
econ_vars <- unique(econ_long$variable)
mapList_econ <- list()
for(i in econ_vars){
mapList_econ[[i]] <-
ggplot() +
geom_sf(data = filter(econ_long, variable == i), aes(fill=value), colour=NA) +
scale_fill_viridis(name="") +
labs(title=i) + mapTheme()
}
do.call(grid.arrange,c(mapList_econ, ncol = 3, top = "Select Socioeconomics by Census Tract", bottom = "Source: US Census, ACS 2019"))
#pct transport to work map
ggplot()+
geom_sf(data=EP_econ, aes(fill=pct_transport_to_work))+
scale_fill_viridis()+
labs(title="Percent Population with Transportation to Work in 2019",
subtitle="Census Tracts in El Paso, TX", caption="Source: US Census, ACS 2019") + mapTheme()
#median household inc map
ggplot()+
geom_sf(data=EP_econ, aes(fill=med_hh_income))+
scale_fill_viridis()+
labs(title="Median Household Income 2019",
subtitle="Census Tracts in El Paso, TX", caption="Source: US Census, ACS 2019") + mapTheme()
#median rent map
ggplot()+
geom_sf(data=EP_econ, aes(fill=med_rent))+
scale_fill_viridis()+
labs(title="Median Rent ($) 2019",
subtitle="Census Tracts in El Paso, TX", caption="Source: US Census, ACS 2019") + mapTheme()
# delete duplicated "LOCAL" class
EPCenterline$CLASS[EPCenterline$CLASS == "LOCAL\r\n\r\n\r\n\r\n" | EPCenterline$CLASS == "LOCAL\r\n\r\n" | EPCenterline$CLASS == "LOCAL\r\n" | EPCenterline$CLASS == "LOCAL\r\n\r\n\r\n"] <- "LOCAL"
unique(EPCenterline$CLASS)
# remove some unneeded columns
# subset centerline data to El Paso city maintained segments
# Clip to el paso city boundary
EPCenterline <-
EPCenterline %>%
dplyr::select(-POD_ALIAS1, -POD_ALIAS2, -POD_ALIAS3, -POD_ALIAS4, -STS_ALIAS4 , -STN_ALIAS4, -PRD_ALIAS4 , -STS_ALIAS3, -PRD_ALIAS3, -STS_ALIAS2, -PRD_ALIAS2, -STS_ALIAS1, -PRD_ALIAS1, -STR, -STL, -ESNL, -ESNR) %>%
subset(MUNR == 'CITY OF EL PASO') %>%
st_intersection(El_Paso_city, EPCenterline) %>%
subset(CLASS == "LOCAL" | CLASS == "MINOR" | CLASS == "MAJOR" | CLASS == "COLLECTOR" | CLASS == "MINOR PR" | CLASS == "COLLECTOR PR" | CLASS == "MAJOR PR" )
ggplot() +
geom_sf(data = EPCenterline, aes(color = CLASS)) +
labs(title = "Centerlines with class",
subtitle = "El Paso, TX") + mapTheme()
# unique(EPCenterline$CLASS)
ggplot(EPCenterline, aes(y=CLASS)) +
geom_bar(width=0.5, color="black", fill = "#08519c") +
labs(title = "Pavement Center Lines by Class",
subtitle = "El Paso, TX") + plotTheme()
#join with centerline with age so we can include PCI info
EPCenterline_with_PCI <-
EPCenterline %>%
st_join(centerline_with_age)
# create an index so that each segment has a unique id
EPCenterline_with_PCI$index <- 1:nrow(EPCenterline_with_PCI)
EPCenterline_with_PCI <-
EPCenterline_with_PCI %>%
subset(MUNR == 'CITY OF EL PASO') %>%
st_intersection(El_Paso_city, EPCenterline_with_PCI) %>%
subset(CLASS == "LOCAL" | CLASS == "MINOR" | CLASS == "MAJOR" | CLASS == "COLLECTOR" | CLASS == "MINOR PR" | CLASS == "COLLECTOR PR" | CLASS == "MAJOR PR" )
# pavement length
EPCenterline_with_PCI <-
EPCenterline_with_PCI %>%
mutate(pave_length = st_length(geometry))
census_geom <-
EP_econ %>%
subset(select = c("GEOID","geometry"))
# VMT <- read_csv("Data/ElPaso_VMT_res_bg.csv")
VMT$GEOID <- substr(VMT$FIPS, 1, 11)
VMT_sf <-
census_geom %>%
right_join(VMT, by="GEOID") %>%
subset(id != 0) %>%
group_by(GEOID) %>%
summarise(VMT = sum(count)) %>%
merge(EP_econ %>%
st_drop_geometry() %>%
dplyr::select(GEOID, total_pop), by="GEOID",all.x=TRUE) %>%
mutate(VMT_pop = VMT/total_pop) %>%
st_transform('ESRI:102339')
ggplot() +
geom_sf(data = VMT_sf, aes(fill = VMT_pop)) +
labs(title = "VMT per population",
subtitle = "El Paso, TX") +
mapTheme()
#when joining in VMT data, EPCenterline_new gets larger. look into this - that's why I duplicated it so we don't overwrite it
EPCenterline_new2 <-
EPCenterline_new %>%
st_join(VMT_sf)
View(EPCenterline_new2)
#when joining in VMT data, EPCenterline_new gets larger. look into this - that's why I duplicated it so we don't overwrite it
EPCenterline_new2 <-
EPCenterline_new %>%
st_join(VMT_sf)%>%
group_by('index')%>%
summarize(mean('PCI_2018'))
View(EPCenterline_new2)
EPCenterline_new2 <-
EPCenterline_new %>%
st_join(VMT_sf)%>%
group_by('index')
View(EPCenterline_new2)
#when joining in VMT data, EPCenterline_new gets larger. look into this - that's why I duplicated it so we don't overwrite it
EPCenterline_new2 <-
EPCenterline_new %>%
st_join(VMT_sf)%>%
group_by('index')%>%
summarize(PCI_2018= mean('PCI_2018'))
View(EPCenterline_new2)
View(EPCenterline_new2)
EPCenterline_new2 <-
EPCenterline_new %>%
st_join(VMT_sf)%>%
group_by(index)%>%
summarize(PCI_2018= mean('PCI_2018'))
View(EPCenterline_new2)
#when joining in VMT data, EPCenterline_new gets larger. look into this - that's why I duplicated it so we don't overwrite it
EPCenterline_new2 <-
EPCenterline_new %>%
st_join(VMT_sf)%>%
group_by(index)%>%
summarize(PCI_2018= mean(PCI_2018))
View(EPCenterline_new2)
EPCenterline_new3 <-
EPCenterline_new2 %>%
left_join(EP_econ %>%
st_drop_geometry(), by = 'GEOID') %>%
left_join(EP_race %>%
st_drop_geometry() %>%
dplyr::select(GEOID, pctWhite), by = 'GEOID') %>%
left_join(EP_ethnicity %>%
st_drop_geometry() %>%
dplyr::select(GEOID, pctNotHL), by = 'GEOID')
View(EPCenterline_new)
EPCenterline_new2 <- EPCenterline_new %>%
left_join(VMT_with_PCI, by = 'index')
# this works! but takes a while to run - feel free to change to make it faster if you know a better way :)
VMT_with_PCI <-
EPCenterline_new %>%
st_join(VMT_sf)%>%
group_by(index)%>%
summarize(PCI_2018= mean(PCI_2018))
#join to epcenterline df
EPCenterline_new2 <- EPCenterline_new %>%
left_join(VMT_with_PCI, by = 'index')
# this works! but takes a while to run - feel free to change to make it faster if you know a better way :)
VMT_with_PCI <-
EPCenterline_new %>%
st_join(VMT_sf)%>%
group_by(index)%>%
summarize(PCI_2018= mean(PCI_2018))%>%
st_drop_geometry()
#join to epcenterline df
EPCenterline_new2 <- EPCenterline_new %>%
left_join(VMT_with_PCI, by = 'index')
View(EPCenterline_new2)
EPCenterline_new3 <-
EPCenterline_new2 %>%
left_join(EP_econ %>%
st_drop_geometry(), by = 'GEOID') %>%
left_join(EP_race %>%
st_drop_geometry() %>%
dplyr::select(GEOID, pctWhite), by = 'GEOID') %>%
left_join(EP_ethnicity %>%
st_drop_geometry() %>%
dplyr::select(GEOID, pctNotHL), by = 'GEOID')
View(VMT_sf)
# this works! but takes a while to run - feel free to change to make it faster if you know a better way :)
VMT_with_PCI <-
EPCenterline_new %>%
st_join(VMT_sf)%>%
group_by(index, GEOID)%>%
summarize(PCI_2018= mean(PCI_2018))%>%
st_drop_geometry()
#join to epcenterline df
EPCenterline_new2 <- EPCenterline_new %>%
left_join(VMT_with_PCI, by = 'index')
# this works! but takes a while to run - feel free to change to make it faster if you know a better way :)
VMT_with_PCI <-
EPCenterline_new %>%
st_join(VMT_sf)%>%
group_by(index, GEOID)%>%
summarize(PCI_2018= mean(PCI_2018))%>%
st_drop_geometry()
# this works! but takes a while to run - feel free to change to make it faster if you know a better way :)
VMT_with_PCI <-
EPCenterline_new %>%
st_join(VMT_sf)
VMT_with_PCI <- VMT_with_PCI %>%
group_by(index, GEOID)%>%
summarize(PCI_2018= mean(PCI_2018))%>%
st_drop_geometry()
# this works! but takes a while to run - feel free to change to make it faster if you know a better way :)
VMT_with_PCI <-
EPCenterline_new %>%
st_join(VMT_sf)
VMT_with_PCI <- VMT_with_PCI %>%
group_by(index, GEOID)%>%
summarize(PCI_2018= min(PCI_2018))%>%
st_drop_geometry()
VMT_with_PCI <- VMT_with_PCI %>%
st_drop_geometry()%>%
group_by(index, GEOID)%>%
dplyr::select(min(PCI_2018))
VMT_with_PCI <- VMT_with_PCI %>%
st_drop_geometry()%>%
group_by(index, GEOID)%>%
dplyr::select(min('PCI_2018'))
View(VMT_with_PCI)
count(VMT_with_PCI$index) >1
count(VMT_with_PCI, vars=index)
count(VMT_with_PCI[index]>1)
count(VMT_with_PCI['index']>1)
View(VMT_with_PCI)
VMT_centerlines <-
EPCenterline_new %>%
st_join(VMT_sf)
VMT_with_PCI_GEOID <- VMT_centerlines %>%
st_drop_geometry()%>%
group_by(index, GEOID)%>%
dplyr::select(PCI_2018)
VMT_with_PCI_GEOID <- VMT_centerlines %>%
st_drop_geometry()%>%
group_by(index, GEOID)%>%
dplyr::select(index, GEOID, PCI_2018)
View(VMT_with_PCI_GEOID)
VMT_with_PCI_index <- VMT_with_PCI_GEOID %>%
group_by(index) %>%
summarize(PCI_2018 = min(PCI_2018))
View(VMT_with_PCI_index)
rm(VMT_with_PCI)
rm(VMT_centerlines)
rm(VMT_with_PCI_GEOID)
rm(VMT_with_PCI_index)
# this works! but takes a while to run - feel free to change to make it faster if you know a better way :)
VMT_centerlines <-
EPCenterline_new %>%
st_join(VMT_sf)
VMT_with_PCI_GEOID <- VMT_centerlines %>%
st_drop_geometry()%>%
group_by(index, GEOID)%>%
dplyr::select(index, GEOID, PCI_2018)
VMT_with_PCI_index <- VMT_with_PCI_GEOID %>%
group_by(index) %>%
summarize(PCI_2018 = min(PCI_2018))
VMT_with_PCI <- left_join(VMT_with_PCI_index, VMT_with_PCI_GEOID, by = 'index')
View(VMT_with_PCI)
VMT_with_PCI_index <- VMT_with_PCI_GEOID %>%
group_by(index) %>%
summarize(PCI_2018 = mean(PCI_2018))
VMT_with_PCI <- left_join(VMT_with_PCI_index, VMT_with_PCI_GEOID, by = 'index')
View(VMT_with_PCI_GEOID)
rm(VMT_centerlines)
rm(VMT_with_PCI)
rm(VMT_with_PCI_GEOID)
rm(VMT_with_PCI_index)
# this works! but takes a while to run - feel free to change to make it faster if you know a better way :)
VMT_centerlines <-
EPCenterline_new %>%
st_join(VMT_sf)
VMT_with_PCI_GEOID <- VMT_centerlines %>%
st_drop_geometry()%>%
group_by(index, GEOID)%>%
dplyr::select(index, GEOID, PCI_2018)
VMT_with_PCI_GEOID$uniqueID <- 1:nrow(VMT_with_PCI_GEOID)
View(VMT_with_PCI_GEOID)
VMT_with_PCI_index <- VMT_with_PCI_GEOID %>%
group_by(index) %>%
summarize(PCI_2018 = mean(PCI_2018),
uniqueID = min(uniqueID))%>%
dplyr::select(index, uniqueID, PCI_2018)
View(VMT_with_PCI_index)
VMT_with_PCI <- left_join(VMT_with_PCI_index, VMT_with_PCI_GEOID, by = 'uniqueID')
View(VMT_with_PCI)
VMT_with_PCI <- left_join(VMT_with_PCI_index, VMT_with_PCI_GEOID, by = 'uniqueID')%>%
dplyr::select(index,GEOID,PCI_2018)
VMT_with_PCI <- left_join(VMT_with_PCI_index, VMT_with_PCI_GEOID, by = 'uniqueID')%>%
dplyr::select(index.y,GEOID.y,PCI_2018.y)
VMT_with_PCI <- left_join(VMT_with_PCI_index, VMT_with_PCI_GEOID, by = 'uniqueID')%>%
dplyr::select(index.y,GEOID,PCI_2018.y)
VMT_with_PCI <- left_join(VMT_with_PCI_index, VMT_with_PCI_GEOID, by = 'uniqueID')%>%
dplyr::select(index.y,GEOID,PCI_2018.y)%>%
rename(index=index.y,
PCI_2018.y=PCI_2018)
VMT_with_PCI <- left_join(VMT_with_PCI_index, VMT_with_PCI_GEOID, by = 'uniqueID')%>%
dplyr::select(index.y,GEOID,PCI_2018.y)%>%
rename(index=index.y,
PCI_2018=PCI_2018.y)
View(VMT_with_PCI)
#join to epcenterline df
EPCenterline_new2 <- EPCenterline_new %>%
left_join(VMT_with_PCI, by = 'index')
EPCenterline_new3 <-
EPCenterline_new2 %>%
left_join(EP_econ %>%
st_drop_geometry(), by = 'GEOID') %>%
left_join(EP_race %>%
st_drop_geometry() %>%
dplyr::select(GEOID, pctWhite), by = 'GEOID') %>%
left_join(EP_ethnicity %>%
st_drop_geometry() %>%
dplyr::select(GEOID, pctNotHL), by = 'GEOID')
numVars <-
EPCenterline_new %>%
dplyr::select(#potholes_count, waze_count, crash_count,
#commenting out census variables while census API is down
#VMT_pop, total_pop.y, med_hh_income, med_rent, pct_transport_to_work, pctWhite, pctNotHL,
Res_Year,potholes_len, waze_len, crash_len) %>%
st_drop_geometry() %>%
na.omit()
ggcorrplot(
round(cor(numVars), 1),
p.mat = cor_pmat(numVars),
colors = c("#25CB10", "white", "#FA7800"),
type="lower",
show.diag = TRUE,
lab = TRUE,
insig = "blank") +
labs(title = "Correlation Matrix for Numeric Variables") +
theme(plot.title = element_text(hjust = 0.5)) +
plotTheme()
ggcorrplot(
round(cor(numVars), 1),
p.mat = cor_pmat(numVars),
colors = c("#0000FF", "white", "#DC143C"),
type="lower",
method = 'circle',
insig = "blank") +
labs(title = "Correlation Matrix for Numeric Variables")
numVars <-
EPCenterline_new %>%
dplyr::select(#potholes_count, waze_count, crash_count,
#commenting out census variables while census API is down
VMT_pop, #total_pop.y, med_hh_income, med_rent, pct_transport_to_work, pctWhite, pctNotHL,
Res_Year,potholes_len, waze_len, crash_len) %>%
st_drop_geometry() %>%
na.omit()
# this works! but takes a while to run - feel free to change to make it faster if you know a better way :)
VMT_centerlines <-
EPCenterline_new %>%
st_join(VMT_sf)
VMT_with_PCI_GEOID <- VMT_centerlines %>%
st_drop_geometry()%>%
group_by(index, GEOID)%>%
dplyr::select(index, GEOID, PCI_2018, VMT_pop)
VMT_with_PCI_GEOID$uniqueID <- 1:nrow(VMT_with_PCI_GEOID)
VMT_with_PCI_index <- VMT_with_PCI_GEOID %>%
group_by(index) %>%
summarize(PCI_2018 = mean(PCI_2018),
uniqueID = min(uniqueID),
VMT_pop = mean(VMT_pop))%>%
dplyr::select(index, uniqueID, PCI_2018, VMT_pop)
View(VMT_with_PCI_index)
VMT_with_PCI <- left_join(VMT_with_PCI_index, VMT_with_PCI_GEOID, by = 'uniqueID')%>%
dplyr::select(index.y,GEOID,PCI_2018.y)%>%
rename(index=index.y,
PCI_2018=PCI_2018.y)
View(VMT_with_PCI)
VMT_with_PCI <- left_join(VMT_with_PCI_index, VMT_with_PCI_GEOID, by = 'uniqueID')%>%
dplyr::select(index.y,GEOID,PCI_2018.y, VMT_Pop.y)%>%
rename(index=index.y,
PCI_2018=PCI_2018.y,
VMT_Pop=VMT_Pop.y)
VMT_with_PCI <- left_join(VMT_with_PCI_index, VMT_with_PCI_GEOID, by = 'uniqueID')
View(VMT_with_PCI)
VMT_with_PCI <- left_join(VMT_with_PCI_index, VMT_with_PCI_GEOID, by = 'uniqueID')%>%
dplyr::select(index.y,GEOID,PCI_2018.y, VMT_Pop.y)%>%
rename(index=index.y,
PCI_2018=PCI_2018.y,
VMT_Pop=VMT_Pop.y)
VMT_with_PCI <- left_join(VMT_with_PCI_index, VMT_with_PCI_GEOID, by = 'uniqueID')%>%
dplyr::select(index.y,GEOID,PCI_2018.y, VMT_Pop.y)
VMT_with_PCI <- left_join(VMT_with_PCI_index, VMT_with_PCI_GEOID, by = 'uniqueID')%>%
dplyr::select(index.y,GEOID,PCI_2018.y, VMT_pop.y)%>%
rename(index=index.y,
PCI_2018=PCI_2018.y,
VMT_Pop=VMT_pop.y)
View(VMT_with_PCI)
#join to epcenterline df
EPCenterline_new2 <- EPCenterline_new %>%
left_join(VMT_with_PCI, by = 'index')
numVars <-
EPCenterline_new %>%
dplyr::select(#potholes_count, waze_count, crash_count,
#commenting out census variables while census API is down
VMT_pop, #total_pop.y, med_hh_income, med_rent, pct_transport_to_work, pctWhite, pctNotHL,
Res_Year,potholes_len, waze_len, crash_len) %>%
st_drop_geometry() %>%
na.omit()
#join to epcenterline df
EPCenterline_new <- EPCenterline_new %>%
left_join(VMT_with_PCI, by = 'index')
EPCenterline_new <-
EPCenterline_new %>%
left_join(EP_econ %>%
st_drop_geometry(), by = 'GEOID') %>%
left_join(EP_race %>%
st_drop_geometry() %>%
dplyr::select(GEOID, pctWhite), by = 'GEOID') %>%
left_join(EP_ethnicity %>%
st_drop_geometry() %>%
dplyr::select(GEOID, pctNotHL), by = 'GEOID')
numVars <-
EPCenterline_new %>%
dplyr::select(#potholes_count, waze_count, crash_count,
#commenting out census variables while census API is down
VMT_pop, #total_pop.y, med_hh_income, med_rent, pct_transport_to_work, pctWhite, pctNotHL,
Res_Year,potholes_len, waze_len, crash_len) %>%
st_drop_geometry() %>%
na.omit()
View(EPCenterline_new)
VMT_with_PCI <- left_join(VMT_with_PCI_index, VMT_with_PCI_GEOID, by = 'uniqueID')%>%
dplyr::select(index.y,GEOID,PCI_2018.y, VMT_pop.y)%>%
rename(index=index.y,
PCI_2018=PCI_2018.y,
VMT_pop=VMT_pop.y)
#join to epcenterline df
EPCenterline_new <- EPCenterline_new %>%
left_join(VMT_with_PCI, by = 'index')
numVars <-
EPCenterline_new %>%
dplyr::select(#potholes_count, waze_count, crash_count,
#commenting out census variables while census API is down
VMT_pop, #total_pop.y, med_hh_income, med_rent, pct_transport_to_work, pctWhite, pctNotHL,
Res_Year,potholes_len, waze_len, crash_len) %>%
st_drop_geometry() %>%
na.omit()
ggcorrplot(
round(cor(numVars), 1),
p.mat = cor_pmat(numVars),
colors = c("#25CB10", "white", "#FA7800"),
type="lower",
show.diag = TRUE,
lab = TRUE,
insig = "blank") +
labs(title = "Correlation Matrix for Numeric Variables") +
theme(plot.title = element_text(hjust = 0.5)) +
plotTheme()
ggcorrplot(
round(cor(numVars), 1),
p.mat = cor_pmat(numVars),
colors = c("#0000FF", "white", "#DC143C"),
type="lower",
method = 'circle',
insig = "blank") +
labs(title = "Correlation Matrix for Numeric Variables")
