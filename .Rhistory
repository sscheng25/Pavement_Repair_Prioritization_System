year = 2019,
state = 48,      # 48 for Texas
geometry = TRUE,
county = 141,    # 141 for El Paso county
output = "wide") %>%
rename(total_pop =  B01003_001E,
med_hh_income = B19013_001E,
med_rent = B25058_001E,
transport_to_work = B08301_001E) %>%
dplyr::select("GEOID","NAME","total_pop","med_hh_income","med_rent","transport_to_work","geometry")%>% #drop MOE columns
mutate(pct_transport_to_work = (ifelse(total_pop > 0, transport_to_work / total_pop,0))*100)
EP_econ <-
get_acs(geography = "tract",
variables = c("B19013_001E", #median household income
"B25058_001E", #median rent
"B08301_001E", #people who have means of transportation to work
"B01003_001E"), #total pop
year = 2019,
state = 48,      # 48 for Texas
geometry = TRUE,
county = 141,    # 141 for El Paso county
output = "wide") %>%
rename(total_pop =  B01003_001E,
med_hh_income = B19013_001E,
med_rent = B25058_001E,
transport_to_work = B08301_001E) %>%
dplyr::select("GEOID","NAME","total_pop","med_hh_income","med_rent","transport_to_work","geometry")%>% #drop MOE columns
mutate(pct_transport_to_work = (ifelse(total_pop > 0, transport_to_work / total_pop,0))*100)
# create an index so that each segment has a unique id
EPCenterline$index <- 1:nrow(EPCenterline)
# delete duplicated "LOCAL" class
EPCenterline$CLASS[EPCenterline$CLASS == "LOCAL\r\n\r\n\r\n\r\n" | EPCenterline$CLASS == "LOCAL\r\n\r\n" | EPCenterline$CLASS == "LOCAL\r\n" | EPCenterline$CLASS == "LOCAL\r\n\r\n\r\n"] <- "LOCAL"
unique(EPCenterline$CLASS)
# remove some unneeded columns
# subset centerline data to El Paso city maintained segments
# Clip to el paso city boundary
EPCenterline <-
EPCenterline %>%
dplyr::select(-POD_ALIAS1, -POD_ALIAS2, -POD_ALIAS3, -POD_ALIAS4, -STS_ALIAS4 , -STN_ALIAS4, -PRD_ALIAS4 , -STS_ALIAS3, -PRD_ALIAS3, -STS_ALIAS2, -PRD_ALIAS2, -STS_ALIAS1, -PRD_ALIAS1, -STR, -STL, -ESNL, -ESNR) %>%
subset(MUNR == 'CITY OF EL PASO') %>%
st_intersection(El_Paso_city, EPCenterline) %>%
subset(CLASS == "LOCAL" | CLASS == "MINOR" | CLASS == "MAJOR" | CLASS == "COLLECTOR" | CLASS == "MINOR PR" | CLASS == "COLLECTOR PR" | CLASS == "MAJOR PR" ) %>%
mutate(pave_length = st_length(geometry))
unique(EPCenterline$CLASS)
ggplot() +
geom_sf(data = EPCenterline, aes(color = CLASS)) +
labs(title = "Centerlines with class",
subtitle = "El Paso, TX") + mapTheme()
# unique(EPCenterline$CLASS)
ggplot(EPCenterline, aes(y=CLASS)) +
geom_bar(width=0.5, color="black", fill = "#FF6666") +
labs(title = "Pavement Center Lines by Class",
subtitle = "El Paso, TX") + plotTheme()
EPCenterline_with_PCI <-
EPCenterline %>%
st_join(centerline_with_age)
ggplot(EPCenterline_with_PCI, aes(y=CLASS)) +
geom_bar(width=0.5, color="black", fill = "#FF6666") +
labs(title = "Pavement Center Lines by Class",
subtitle = "El Paso, TX") + plotTheme()
ggplot(EPCenterline_with_PCI, aes(y=STATUS)) +
geom_bar(width=0.5, color="black", fill = "#FF6666") +
labs(title = "Pavement Center Lines by status",
subtitle = "El Paso, TX") + plotTheme()
class_PCI <-
EPCenterline_with_PCI %>%
subset(STATUS == 'PAVED') %>%
st_drop_geometry() %>%
drop_na(PCI_2018) %>%
group_by(CLASS) %>%
summarise(PCI=mean(PCI_2018))
ggplot(class_PCI, aes(x=PCI, y=CLASS)) +
geom_bar(stat = "identity", color="black", fill = "#FF6666") +
labs(title = "Average PCI value by Class",
subtitle = "El Paso, TX") + plotTheme()
plan_area_PCI <-
EPCenterline_with_PCI %>%
st_drop_geometry() %>%
subset(STATUS == 'PAVED') %>%
drop_na(PCI_2018) %>%
drop_na(PLANAREA) %>%
group_by(PLANAREA) %>%
summarise(PCI=mean(PCI_2018))
ggplot(plan_area_PCI, aes(x=PCI, y=PLANAREA)) +
geom_bar(stat = "identity", color="black", fill = "#FF6666") +
labs(title = "Average PCI Value by Planning Area",
subtitle = "El Paso, TX") + plotTheme()
ggplot() +
geom_sf(data = El_Paso_city, color="grey") +
geom_sf(data = EPCenterline %>%
subset(MUNR == 'CITY OF EL PASO'), colour="red",) +
labs(title = "Centerline with MUNR CITY OF EL PASO",
subtitle = "El Paso, TX") + mapTheme()
# glimpse(centerline_with_age)
ggplot() +
geom_sf(data = El_Paso_city, fill="transparent", color="red") +
geom_sf(data = centerline_with_age, aes(color = PCI_2018)) +
scale_color_viridis(direction=-1)+
labs(title = "Street Centerlines with PCI 2018",
subtitle = "El Paso, TX") + mapTheme()
# unique(center_line$PCI_2018)
ggplot(centerline_with_age, aes(y=PCI_2018)) +
geom_bar(width=0.5, color="transparent", fill = "#FF6666") +
labs(title = "PCI Distribution",
subtitle = "El Paso, TX") + plotTheme()
negative_PCI_list <-
centerline_with_age %>%
subset(PCI_2018 < 0)
unique(negative_PCI_list$PCI_2018)
ggplot() +
geom_sf(data = El_Paso_city, fill="transparent", color="red") +
geom_sf(data = negative_PCI_list, aes(color = PCI_2018)) +
labs(title = "PCI with a negative value",
subtitle = "El Paso, TX") +mapTheme()
ggplot() +
geom_sf(data = El_Paso_city, fill="transparent", color="red") +
geom_sf(data = negative_PCI_list %>%
subset(PCI_2018 == -1), aes(color = PCI_2018)) +
labs(title = "PCI = -1",
subtitle = "El Paso, TX") +mapTheme()
ggplot() +
geom_sf(data = El_Paso_city, fill="transparent", color="red") +
geom_sf(data = negative_PCI_list %>%
subset(PCI_2018 == -2), aes(color = PCI_2018)) +
labs(title = "PCI = -2",
subtitle = "El Paso, TX") +mapTheme()
ggplot() +
geom_sf(data = El_Paso_city, fill="transparent", color="red") +
geom_sf(data = negative_PCI_list %>%
subset(PCI_2018 == -4), aes(color = PCI_2018)) +
labs(title = "PCI = -4",
subtitle = "El Paso, TX") +mapTheme()
ggplot() +
geom_sf(data = El_Paso_city, fill="transparent", color="red") +
geom_sf(data = negative_PCI_list %>%
subset(PCI_2018 == -6), aes(color = PCI_2018)) +
labs(title = "PCI = -6",
subtitle = "El Paso, TX") +mapTheme()
ggplot() +
geom_sf(data = El_Paso_city, fill="transparent", color="red") +
geom_sf(data = negative_PCI_list %>%
subset(PCI_2018 == -7), aes(color = PCI_2018)) +
labs(title = "PCI = -7",
subtitle = "El Paso, TX") +mapTheme()
ggplot() +
geom_sf(data = El_Paso_city, fill="transparent", color="red") +
geom_sf(data = negative_PCI_list %>%
subset(PCI_2018 == -8), aes(color = PCI_2018)) +
labs(title = "PCI = -8",
subtitle = "El Paso, TX") +mapTheme()
ggplot() +
geom_sf(data = El_Paso_city, fill="transparent", color="red") +
geom_sf(data = negative_PCI_list %>%
subset(PCI_2018 == -9), aes(color = PCI_2018)) +
labs(title = "PCI = -9",
subtitle = "El Paso, TX") +mapTheme()
# write.csv(st_drop_geometry(negative_PCI_list), "C:/Users/CSS/Desktop/MUSA801/Data/negative_PCI_list.csv", row.names = FALSE)
# Zero PCI: an empty list
zero_PCI_list <-
centerline_with_age %>%
subset(PCI_2018 == 0)
# glimpse(CIP_layer)
ggplot() +
geom_sf(data = CIP_layer, aes(color = PCI)) +
labs(title = "PCI data from CIP layer",
subtitle = "El Paso, TX") + mapTheme()
# unique(CIP_layer$PCI)
# unique(CIP_layer$DISTRICT)
# glimpse(elpaso_pass)
ggplot() +
geom_sf(data = elpaso_pass, color = "red") +
labs(title = "elpaso_pass",
subtitle = "El Paso, TX") +
mapTheme()
ggplot(elpaso_pass, aes(y=pci_2018)) +
geom_bar(width=0.5, color="transparent", fill = "#FF6666") +
labs(title = "PCI distribution of Elpaso_pass",
subtitle = "El Paso, TX") +
plotTheme()
x_fin <- data.frame()
y_fin <- data.frame()
for (i in waze_data$Location) {
pattern1 <- "Point(.*?) "
pattern2 <- " (.*?))"
x_coor <- regmatches(i, regexec(pattern1, i))
x_temp <- x_coor[[1]][2] %>%
substr(start=2, stop=99)
#print(x_temp)
x_fin <- rbind(x_fin, x_temp)
y_coor <- regmatches(i, regexec(pattern2, i))
y_temp <- y_coor[[1]][2]
y_fin <- rbind(y_fin, y_temp)
}
x_fin$x_coor <- x_fin$X..106.598471.
y_fin$y_coor <- y_fin$X.31.911973.
waze_data$x_coor <- x_fin$x_coor
waze_data$y_coor <- y_fin$y_coor
waze_sf <-
waze_data %>%
st_as_sf(coords = c("x_coor", "y_coor"), crs = 4326, agr = "constant") %>%
st_transform('ESRI:102339')
ggplot() +
geom_sf(data = El_Paso_city, color="grey") +
geom_sf(data = waze_sf, aes(colour=Subtype), size=0.5, show.legend = "point") +
labs(title = "Waze jam data points by subtype",
subtitle = "El Paso, TX") + mapTheme()
ggplot(waze_sf, aes(y=Subtype)) +
geom_bar(width=0.5, color="transparent", fill = "#FF6666") +
labs(title = "Waze jams numbers grouped by subtype",
subtitle = "El Paso, TX") + plotTheme()
ggplot() +
geom_sf(data = El_Paso_city, color="grey") +
geom_sf(data = waze_sf %>%
subset(is.na(Subtype)), color = "red", size=0.5, show.legend = "point") +
labs(title = "Waze jam data points with NA subtype",
subtitle = "El Paso, TX") + mapTheme()
potholes_sf <-
potholes %>%
subset(WORKORDERID!=588771) %>%
na.omit() %>%
st_as_sf(coords = c("WOXCOORDINATE", "WOYCOORDINATE"),
crs = 'epsg:2277',
agr = "constant") %>%
st_transform('ESRI:102339')
potholes_sf$YEAR <- format(mdy_hms(potholes_sf$ACTUALFINISHDATE), format='%Y')
glimpse(potholes_sf)
potholes_sf <-
potholes_sf %>%
subset(YEAR != 1900)
potholes_sf$YEAR[potholes_sf$YEAR == 2106] <- 2016
# new sf with last five years of points data only for easier legibility on maps
potholes_sf_2015to2018 <- potholes_sf %>% subset(YEAR > 2014 & YEAR < 2019)
potholes_sf_2019to2021 <- potholes_sf %>% subset(YEAR > 2018)
potholes_sf_2018 <- potholes_sf %>% subset(YEAR == 2018)
# 2018 potholes map
ggplot() +
geom_sf(data=EPCenterline, color="#585858", alpha=0.8) +
geom_sf(data = potholes_sf_2018, size=0.2, color="blue", alpha=0.2) +
geom_sf(data = El_Paso_city, fill="transparent", color="red") +
guides(fill="legend")+
labs(title = "Potholes and Centerlines in 2018",
subtitle = "El Paso, TX") + mapTheme()
# 2015-2018 map
ggplot() +
geom_sf(data = El_Paso_city, fill="grey") +
geom_sf(data = potholes_sf_2015to2018, aes(colour=YEAR), size=0.2, show.legend = "point") +
labs(title = "Potholes in 2015-2018",
subtitle = "El Paso, TX") + mapTheme()
#  2019-2021 map
ggplot() +
geom_sf(data = El_Paso_city, fill="grey") +
geom_sf(data = potholes_sf_2019to2021, aes(colour=YEAR), size=0.2, show.legend = "point") +
labs(title = "Potholes 2019-2021",
subtitle = "El Paso, TX") + mapTheme()
ggplot(potholes_sf, aes(y=YEAR)) +
geom_bar(width=0.5, color="black", fill = "#FF6666") +
labs(title = "Year of pot holes repairment",
subtitle = "El Paso, TX") + plotTheme()
#create centerline buffer of 24ft and centerline buffer
EPCenterline_buffer <- st_buffer(EPCenterline, dist=24) %>% st_as_sf()
#join potholes to EPCenterline_buffer using nearest feature
potholes_centerlines <-  st_join(potholes_sf, EPCenterline_buffer, join = st_nearest_feature)
#clean up to make it easier
potholes_centerlines_clean <- potholes_centerlines %>%
dplyr::select(WORKORDERID, index) %>% st_drop_geometry()
# count potholes per street segment
potholes_groupings <- potholes_centerlines_clean %>%
group_by(index) %>%
summarize(potholes_count=n())
#then join back to initial EPCenterline using index as the ID
EPCenterline_new <- merge(EPCenterline, potholes_groupings, by = "index", all.x=TRUE)
#replace NAs in potholes count column with 0
EPCenterline_new$potholes_count[is.na(EPCenterline_new$potholes_count)] <- 0
# calculate potholes per 100 meters
EPCenterline_new <-
EPCenterline_new %>%
mutate(potholes_len = potholes_count*100/pave_length)
# only mapping when potholes are greater than or equal to 1
ggplot() +
geom_sf(data = El_Paso_city, fill="transparent", color="red") +
geom_sf(data = EPCenterline_new, aes(color = potholes_count)) +
scale_color_viridis(direction=-1, limits = c(1, 150))+
labs(title = "Street Centerlines by Number of Potholes",
subtitle = "El Paso, TX") + mapTheme()
# excluding segments with 0 potholes
ggplot(EPCenterline_new, aes(x=potholes_count)) + geom_histogram(fill="purple", color = "white") + scale_x_continuous(limits = c(1, 150)) + plotTheme()
#including setgments with 0 potholes
ggplot(EPCenterline_new, aes(x=potholes_count)) + geom_histogram(fill="purple", color = "white") + plotTheme()
#join waze jam data to EPCenterline_buffer using nearest feature
waze_centerlines <-  st_join(waze_sf, EPCenterline_buffer, join = st_nearest_feature)
#clean up to make it easier
waze_centerlines_clean <- waze_centerlines %>%
st_drop_geometry()
# count potholes per street segment
waze_groupings <- waze_centerlines_clean %>%
group_by(index) %>%
summarize(waze_count=n())
#then join back to initial EPCenterline using index as the ID
EPCenterline_new <- merge(EPCenterline_new, waze_groupings, by = "index", all.x=TRUE)
#replace NAs in potholes count column with 0
EPCenterline_new$waze_count[is.na(EPCenterline_new$waze_count)] <- 0
# calculate waze jams per 100 meters
EPCenterline_new <-
EPCenterline_new %>%
mutate(waze_len = waze_count*100/pave_length)
#replace 0s in lat long columns with NA so we can omit
crash18_trim<-crash18[!(crash18$Latitude==0 | crash18$Longitude==0),]
#transforming to our crs
crash18_sf <- crash18_trim %>%
na.omit() %>%
st_as_sf(coords = c("Latitude", "Longitude"),
crs = 'epsg:2277',
agr = "constant") %>%
st_transform('ESRI:102339')
#join crashes to EPCenterline_buffer using nearest feature
crash_centerlines <-  st_join(crash18_sf, EPCenterline_buffer, join = st_nearest_feature)
#clean up to make it easier
crash_centerlines_clean <- crash_centerlines %>%
dplyr::select(Crash_ID, index) %>% st_drop_geometry()
#NEED TO FIX THIS CHUNK
# count crashes per street segment
crash_groupings <- crash_centerlines_clean %>%
group_by(index) %>%
summarize(crash_count=n())
#then join back to initial EPCenterline using index as the ID
EPCenterline_new <- merge(EPCenterline_new, crash_groupings, by = "index", all.x=TRUE)
#replace NAs in crash count column with 0
EPCenterline_new$crash_count[is.na(EPCenterline_new$crash_count)] <- 0
# calculate crahs per 100 meters
EPCenterline_new <-
EPCenterline_new %>%
mutate(crash_len = crash_count*100/pave_length)
# only mapping when crashes are greater than or equal to 1
ggplot() +
geom_sf(data = El_Paso_city, fill="transparent", color="red") +
geom_sf(data = EPCenterline_new , aes(color = crash_count)) +
scale_color_viridis(direction=-1, limits = c(1, 150))+
labs(title = "Street Centerlines by Number of Crashes",
subtitle = "El Paso, TX") + mapTheme()
# excluding segments with 0 crashes
ggplot(EPCenterline_new, aes(x=crash_count)) + geom_histogram(fill="purple", color = "white") +
scale_x_continuous(limits = c(1, 150)) +
plotTheme()
#including segments with 0 crashes
ggplot(EPCenterline_new, aes(x=crash_count)) + geom_histogram(fill="purple", color = "white") +
plotTheme()
# glimpse(zoning)
ggplot() +
geom_sf(data = zoning, fill="grey") +
labs(title = "Zoning",
subtitle = "El Paso, TX") + mapTheme()
census_geom <-
EP_econ %>%
subset(select = c("GEOID","geometry"))
EPCenterline_new <-
EPCenterline_new %>%
st_join(VMT_sf)
#comparing TIGER/Line shapefile to the street centerlines shapefile from Alex
tl_roads <- st_read("Data/tl_2018_roads/tl_2018_48141_roads.shp") %>%
st_transform('ESRI:102339')
ggplot(tl_roads, aes(y=RTTYP)) +
geom_bar(width=0.5, color="black", fill = "#FF6666") +
labs(title = "El Paso,TX Roads by RouteType",
subtitle = "TIGER/Line 2018") +
plotTheme()
numVars <-
EPCenterline_final %>%
dplyr::select(potholes_count, waze_count, crash_count,
#commenting out census variables while census API is down
#VMT_pop, total_pop.y, med_hh_income, med_rent, pct_transport_to_work, pctWhite, pctNotHL,
Res_Year,potholes_len, waze_len, crash_len) %>%
st_drop_geometry() %>%
na.omit()
EPCenterline_with_PCI <-
EPCenterline_new %>%
st_join(centerline_with_age, join = st_intersects)
## need someone help me look into this dataframe
## EPCenterline_final has 76072 rows of data, but the left object (EPCenterline_new) in the left_join below has only 34224 rows
EPCenterline_final <-
EPCenterline_new %>%
left_join(EPCenterline_with_PCI %>%
st_drop_geometry() %>%
dplyr::select(index, PCI_2018, Res_Year), by = 'index')
numVars <-
EPCenterline_final %>%
dplyr::select(potholes_count, waze_count, crash_count,
#commenting out census variables while census API is down
#VMT_pop, total_pop.y, med_hh_income, med_rent, pct_transport_to_work, pctWhite, pctNotHL,
Res_Year,potholes_len, waze_len, crash_len) %>%
st_drop_geometry() %>%
na.omit()
ggcorrplot(
round(cor(numVars), 1),
p.mat = cor_pmat(numVars),
colors = c("#25CB10", "white", "#FA7800"),
type="lower",
show.diag = TRUE,
lab = TRUE,
insig = "blank") +
labs(title = "Correlation Matrix for Numeric Variables") +
theme(plot.title = element_text(hjust = 0.5)) +
plotTheme()
ggcorrplot(
round(cor(numVars), 1),
p.mat = cor_pmat(numVars),
colors = c("#0000FF", "white", "#DC143C"),
type="lower",
method = 'circle',
insig = "blank") +
labs(title = "Correlation Matrix for Numeric Variables")
roadbed_base <- st_read("Data/Roadbed_Base/Roadbed_Base.shp")
roadbed_surface <- st_read("Data/Roadbed_Surface/Roadbed_Surface.shp")
View(roadbed_base)
roadbed_base <- roadbed_base %>%
st_transform('ESRI:102339')
ggplot(roadbed_base, aes(y=BASE_TYPE_)) +
geom_bar(width=0.5, color="black", fill = "#FF6666") +
labs(title = "El Paso,TX Roads by Base Material") +
plotTheme()
View(roadbed_surface)
roadbed_surface <- roadbed_surface %>%
st_transform('ESRI:102339')
ggplot(roadbed_surface, aes(y=SRFC_TYPE)) +
geom_bar(width=0.5, color="black", fill = "#FF6666") +
labs(title = "El Paso,TX Roads by Surface Material") +
plotTheme()
View(EPCenterline)
View(centerline_with_age)
View(EPCenterline)
paved_status <- EPCenterline[c('Status','index')]
paved_status <- EPCenterline[c('STATUS','index')]
View(paved_status)
ggplot(paved_status, aes(y=STATUS)) +
geom_bar(width=0.5, color="black", fill = "#FF6666") +
labs(title = "El Paso,TX Roads by Paved Status") +
plotTheme()
View(EPCenterline_with_PCI)
View(tl_roads)
View(tl_roads)
tl_roads_PCI <- st_join(tl_roads_PCI, EPCenterline_with_PCI, join=st_equals)
tl_roads_PCI <- st_join(tl_roads, EPCenterline_with_PCI, join=st_equals)
View(tl_roads_PCI)
tl_roads_PCI <- st_join(tl_roads, EPCenterline_with_PCI, join=st_nearest_feature)
View(tl_roads_PCI)
tl_roads_PCI <- tl_roads_PCI[c('index','RTTYP','PCI_2018')]
View(tl_roads_PCI)
tl_roads_PCI %>%
ggplot(aes(RTTYP, PCI)) +
geom_bar(position = "dodge", stat = "summary", fill="#FF6666") +
labs(title = "RouteType vs. PCI",
subtitle = "Dataset: Tiger Line Roads") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(aes(RTTYP, PCI_2018) +
tl_roads_PCI %>%
ggplot(aes(RTTYP, PCI_2018) +
geom_bar(position = "dodge", stat = "summary", fill="#FF6666") +
labs(title = "RouteType vs. PCI",
subtitle = "Dataset: Tiger Line Roads") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
tl_roads_PCI %>%
ggplot(aes(RTTYP, PCI_2018)) +
geom_bar(position = "dodge", stat = "summary", fill="#FF6666") +
labs(title = "RouteType vs. PCI",
subtitle = "Dataset: Tiger Line Roads") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
tl_roads_PCI %>%
ggplot(aes(RTTYP, PCI_2018)) +
geom_bar(position = "dodge", stat = "summary", fun = "mean", fill="#FF6666") +
labs(title = "RouteType vs. PCI",
subtitle = "Dataset: Tiger Line Roads") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
View(EPCenterline_with_PCI)
class_PCI<- EPCenterline_with_PCI[c('index','CLASS','PCI_2018')]
class_PCI %>%
ggplot(aes(CLASS, PCI_2018)) +
geom_bar(position = "dodge", stat = "summary", fun = "mean", fill="#FF6666") +
labs(title = "Road Class vs. PCI",
subtitle = "Dataset: EPCenterline") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
roadbed_base_PCI <- st_join(roadbed_base, EPCenterline_with_PCI, join=st_nearest_feature)
roadbed_base_PCI <- roadbed_base_PCI[c('index','BASE_TYPE_','PCI_2018')]
tl_roads_PCI %>%
ggplot(aes(BASE_TYPE_, PCI_2018)) +
geom_bar(position = "dodge", stat = "summary", fun = "mean", fill="#FF6666") +
labs(title = "Roadbed Base Material vs. PCI",
subtitle = "Dataset: Roadbed_Base") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
roadbed_base_PCI %>%
ggplot(aes(BASE_TYPE_, PCI_2018)) +
geom_bar(position = "dodge", stat = "summary", fun = "mean", fill="#FF6666") +
labs(title = "Roadbed Base Material vs. PCI",
subtitle = "Dataset: Roadbed_Base") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
roadbed_surface_PCI <- st_join(roadbed_surface, EPCenterline_with_PCI, join=st_nearest_feature)
roadbed_surface_PCI <- roadbed_base_PCI[c('index','SRFC_TYPE','PCI_2018')]
View(roadbed_surface_PCI)
roadbed_surface_PCI <- roadbed_base_PCI[c('SRFC_TYPE','PCI_2018')]
roadbed_surface_PCI <- roadbed_surface_PCI[c('index','SRFC_TYPE','PCI_2018')]
roadbed_surface_PCI %>%
ggplot(aes(SRFC_TYPE, PCI_2018)) +
geom_bar(position = "dodge", stat = "summary", fun = "mean", fill="#FF6666") +
labs(title = "Roadbed surface Material vs. PCI",
subtitle = "Dataset: TXDOT Roadbed_Surface") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
paved_PCI<- EPCenterline_with_PCI[c('index','STATUS','PCI_2018')]
paved_PCI %>%
ggplot(aes(STATUS, PCI_2018)) +
geom_bar(position = "dodge", stat = "summary", fun = "mean", fill="#FF6666") +
labs(title = "Paved Status vs. PCI",
subtitle = "Dataset: EPCenterline") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
View(EP_race)
